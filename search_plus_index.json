{"./":{"url":"./","title":"首页","keywords":"","body":"ColinTree Articles 这个站点放的都是一些我写的文章或者备忘的资料~ 预计是不定期更新（咕咕咕？） 陋站不堪细察，望各位见谅哈 目录 AI中必须了解的知识点 如何自己编译一个离线版Ai 如何导入AIX拓展包 如何写AIX(appinventor拓展组件) Activity启动器实用参数表 AI运行错误代码对照 By ColinTree - 502470184@qq.com - 转载请注明出处            最后更新： 2018-10-13 "},"MustKnow/":{"url":"MustKnow/","title":"AI中必须了解的知识点","keywords":"","body":"AI中必须了解的知识点 透明色/半透明色设置 在appinventor里，该如何设置透明色或者般透明色呢只需要像下图这样创建一个颜色即可 列表中每个数字的范围都是0~255，且依次代表： 红色通道（红的程度，255最红） 绿色通道（绿的程度，255最绿） 蓝色通道（蓝的程度，255最蓝） Alpha通道（透明度，0完全透明，255相当于没有设置透明度） 颜色系统解析 颜色在Appinventor中是使用RGBA格式来表示的传统的RGB格式是这样的：#FF0000 (纯红)， 或者这样： rgb(255, 0, 0)而RGBA在三原色基础上加了一个alpha通道：透明度于是可以表示为：rgb(255,0,0,0.5) (半透明红色)其中相比前面多出来的0.5，就是一半透明度的意思（参见透明色/半透明色设置） 还原组件默认样式 将颜色设为0即可 可以用这个方法的组件有： 按钮 日期选择框（本质是按钮） 列表选择框（本质是按钮） 密码输入框 文本输入框（跟密码输入框一个道理） 时间选择框（本质是按钮） 重启屏幕 有的时候做App难免需要重启屏幕比如说，要实现游戏的重新开始功能。所以，只需要像下图这样即可做到重启屏幕：不过，在实际使用中，需要把文本中的ScreenName替换成实际的屏幕名字 实际上，这个方法也可以用于屏幕切换：开启新屏幕的同时关闭当前屏幕，避免新屏幕关闭后回到原先的屏幕的情况 去除标签外边距 其实，默认情况下标签组件就算是设为0像素的高度或者宽度，组件依旧会占着一定的位置。虽然间隔不大，但是在布局UI的时候还是会有所影响的 解决方案： 在组件设计页面中，去除标签的具有外边距 避免没装中文TTS时，只念英文数字的尴尬情况 有的时候，我们需要使用到手机的TTS功能（Text To Speech 文本转语音）但是安卓自带的Pico TTS只支持英语，法语，德语，意大利语和韩语所以大部分安卓手机是不支持中文的，只有部分用户已经装了中文引擎，比方说，科大讯飞于是就会出现只念英文字母和数字的情况 假设现在需要念读这段文本： 我要说两件事 1.我是树树 2.我还叫ColinTree 在Pico的念读结果中，只剩下： 1 2 ColinTree 解决方案： 只需要像下图这样即可（实际上是判断当前TTS环境是否支持zh，也就是中文。如果有需要，可以改成别的语言的编号） 画布：快速优雅地画个实心矩形 使用画布的过程中，有时会需要绘制一个矩形但是Appinventor的画布本身并没有这个功能 解决方案：只需要像下图这样，画一条很宽的线，便完美解决了这个问题 也许绘制结果并不是特别精确，但是大多数情况下基本够用 XD 直接加载网络图片 联网显示照片，也是个比较常见的功能web客户端组件下载，然后用图像组件？天啦，这也太麻烦了。 实际上，图像组件是支持把文件名填为网址的网址必须是直链，链接本身须指向一张可以直接下载的图片 所以只需要像下图这样即可（图中的链接是我随便找的百度图标） 要注意的是，图太多太大的话，可能会导致屏幕卡顿 如果不希望加载图片导致界面卡顿、需要异步加载，请使用异步图片加载器 去除对话框的按钮、标题或内容 只需要把那一项留为“空文本”即可如图：这样就隐藏了第二个按钮 详细样例见：弹出挂起程序的提示框 弹出挂起程序的提示框 效果图： 代码如图：原理：去除对话框的按钮、标题或内容 而不是简单的使用显示消息对话框 对话框的文字样式设置 效果图： 对应代码： 快速数字区间取整 代码如图：即做到对任何数字进行0~9取整，即最终结果只能为：0,1,2,3,4,5,6,7,8,9运行原理： 先四舍五入（不要也可） 再取0和该数中的最大值（如果数字小于0则保留0，大于0则返回原数）确保数字结果大于等于0 最后取9和该数中的最小值（如果数字大于9则保留9，小于9则返回原数）确保数字结果小于等于9 这只是一个样例，在使用过程中可以随时把最大值或最小值改成需要的数 实际上这个方法并不是只适用与Appinventor，所有编程语言都能用的上的 AI伴侣的其他用途 平时，大家可能就是在需要实时调试的时候才会打开这个AI伴侣实际上，它的扫码功能，不仅限于扫个二维码然后连接网页编辑器 还有一个非常实用的功能：如果用AI伴侣，直接扫描网页上打包apk并显示二维码所生成的二维码，它会帮你完成一系列的任务： 获得下载地址 下载安装包文件 直接打开安装app界面 要注意的是，无论你是在使用流量还是WIFI，扫码结束后都会直接开始下载安装包！小心你的流量 XD 更改项目名字 解决方法： 另存项目以新的名字 删除原项目 By ColinTree - 502470184@qq.com - 转载请注明出处            最后更新： 2018-10-13 "},"BuildLocal/":{"url":"BuildLocal/","title":"如何从MIT源码建起一个App Inventor服务器","keywords":"","body":"如何自己编译一个离线版Ai By ColinTree - 502470184@qq.com - 转载请注明出处            最后更新： 2018-10-13 "},"BuildLocal/README.en.html":{"url":"BuildLocal/README.en.html","title":"英文原版","keywords":"","body":"How to build App Inventor from the MIT sources ref: Google doc: How to build App Inventor from the MIT sources time: 2018.1.20 This document contains instructions for how to build App Inventor from the sources and run it on a local machine or upload it to App Engine. How to build App Inventor from the MIT sources 1. Introduction 1.1 Supported platforms 1.2 Hosting your service on App Engine, or running it locally 1.3 Storing your users’ projects 1.3 Login and authentication 1.4 You’ll need to supply a build server 2. Building App Inventor 2.1 Overview 2.2 The App Inventor source code 2.3 Building App Inventor 2.4 Configuration options 2.5 The App Inventor Companion app 2.6 Automated Tests 3. Running App Inventor on your local machine (MacOS) 3.1 Setting up your MacOSX system: Required software 3.2 Launching App Inventor 3.3 Launching a build server on your local machine 4. Building and Launching App Inventor (GNU/Linux) 4.1 Setting up your GNU/Linux system: Required software 4.1.1 Note on Ubuntu 14.04.1 LTS 64-bit 4.2 Building App Inventor and Launching it on your local machine (GNU/Linux) 5. Building and Launching App Inventor (Windows) 5.2 Building and Launching App Inventor 5.3 Launching a build server on your local machine 6. Setting up a build server 6.1 Create the buildserver software package 6.2 Install the software on the buildserver machine and start the build server 7. Deploying App Inventor on Google App Engine 7.1 Issues to consider before deploying on App Engine 7.1.1 Java and App Engine versions 7.1.2 App Engine hosting; getting an Application ID 7.1.3 User login and authentication 7.1.4 Storage for user projects 7.1.5 Build server 7.1.6 App Engine charges for use 7.2 Building and deploying App Inventor and the Build Server 7.2.1 Build App Inventor and deploy it on appspot.com 7.2.2 Deploy your service to appspot.com 7.2.3 Configuring your instance as a Cloud Integration Project 7.2.4 Set up a build server and configure your App Inventor service to use it 8. Configuration options for the App Inventor service 8.1 Setting up a white list 8.2 Message of the day 8.2.1 Enabling the message of the day 8.2.2 Setting the text for the message of the day 8.3 Terms of Service 9. Configuration options for the Build server 9.1 Version number matching 9.2 Checking the Build Server Status Information 9.3 Changing the Build Server Port Number 9.4 Specifying the maximum number of simultaneous builds 9.5 Restricting the allowable App Engine hosts 9.6 Path for the Build Server log 10. Running App Inventor locally with an external build server 11. Some tips and tricks for speeding up development 1. Introduction App Inventor for Android lets people create apps for android phones by piecing together programming blocks in a web browser. This document is a guide to building and deploying your own App Inventor service using the source code from MIT. It assumes that you’ve already had some experience using App Inventor to build apps, e.g., with the MIT App Inventor service. Now that you’ve used App Inventor, you might want to build your own service for personal use, or to share with a few friends, or as a prelude to working on App Inventor system development. This document focuses on App Inventor 2, but will highlight any differences with App Inventor classic when needed. [ App Inventor classic was withdrawn in 2015. obsolete. It probably will not longer build. ] if you are familiar with git and github, you can see the Contributing to App Inventor 2 slide deck for a quick up and running guide. 1.1 Supported platforms Building and deploying an App Inventor server can be done using MacOSX, GNU/Linux, and Windows operating systems, and we have done this extensively at MIT. If you experience any problems, please contact the Open Source Group. 1.2 Hosting your service on App Engine, or running it locally App Inventor is a Java service built on Google App Engine. As with any App Engine service, you can deploy your App Inventor service to Google’s App Engine infrastructure at appspot.com, so that anyone on the Web can access it, provided you give them permission. If you are planning to do that, we suggest that you get some experience with App Engine and with Java App Engine services in Java. Google provides tutorials that show you how to install App Engine for Java and create simple services. You can also run the App Inventor service on your local machine using the App Engine “dev server” for personal testing and debugging, even if you are not connected to a network. It is also possible to make your dev server available to small numbers of users on your local network, but the developer server is not designed to handle large loads, and we do not recommend using it to provide reliable App Inventor service to more than a handful of users. (Some people have had good experiences running an App Inventor service on the dev server with up to 40 users, although that is with a powerful server machine, not a laptop.) 1.3 Storing your users’ projects Your App Inventor service will maintain storage for individual user projects, both source code and compiled apps (APK files). This storage will be hosted on Google App Engine if you deploy your App Inventor service there, or held on your local machine if you use the dev server. In either case bear in mind that this storage is part of your service: If your service goes away, or you clear the database, the stored user projects will go away. It’s a good idea to advise your users to download backup copies of their projects to their individual machines in case you need to rebuild your service. In particular if you upgrade the version of the developer tools (App Engine SDK) projects in the local dev server may get deleted because how they are stored varies between some versions of the App Engine SDK. Projects store in an App Engine service are more robust and in general will not disappear unless there is a bug in App Inventor that damages them (which can happen!). 1.3 Login and authentication Your users will need to login to your App Inventor service and provide a user name or other identifier. There are currently only two options for login: If you host the service on appspot.com, then users should log in with their Google accounts. If you host the service on a local server, then users can log in with any name at all, and there is no authentication (no passwords). As a consequence, users can read and write each other’s projects, provided they know the login name. So this option will be currently useful only for your individual testing or with a small number of people who work together closely. 1.4 You’ll need to supply a build server The App Inventor service uses an auxiliary Build Server that handles the computationally intensive work of compiling and packaging apps. If you’re running App Inventor on your local machine, that machine can act as its own build server. If you deploy your App Inventor service on at appspot.com, you’ll need to obtain and configure a machine to run as the build server. The build server machine must be a machine that is accessible to the machine that hosts your App Inventor service. In particular, for a service running on appspot.com, the build server must be on the public Internet so that it can be accessed by AppEngine. It’s also possible to designate a separate build server machine for a local (not on appspot.com) App Inventor service. Oracle Java 6 7 is, at this time, the only option to run the Build Server. This is due to the fact that the resultant package for the application has to be signed through the ‘jarsigner’ utility, only available with the Oracle SDK. At this time it is not possible to run the Build Server with other JDKs such as OpenJDK, even though it’s the default installation for Ubuntu Linux. If you are running Ubuntu, make sure you either uninstall Open JDK, or properly install Oracle’s JDK and update all paths. Note that you need a full JDK to run App Inventor, the JRE on its own will not work. We hope that will change in the near future. 2. Building App Inventor This section describes how to build and run the App Inventor service. Once you’ve built the App Inventor service, you can run it on a local server or deploy it to appspot.com. You’ll also need to provide a build server, either by using your App Inventor machine itself as the build server or by providing a separate machine . 2.1 Overview The App Inventor sources are kept on Github in the repository mit-cml/appinventor-sources. You should work from there, and use git in building the system. For an overview of the building operation, see https://github.com/mit-cml/appinventor-sources/blob/master/README.md That overview is a good place to start, and it refers to more detailed instructions, including the present document. 2.2 The App Inventor source code Note: If you intend to work with the sources and contribute back to the project, instead of cloning the project as explained in this section, you should fork it instead. More information on how to do that in the document: Developing App Inventor with git and github. The App Inventor source code is available as Free and Open Source Software that you can download. Once you’ve installed the other software listed in section 3, you can clone a git repository of the source code by running the following git command from a shell: git clone https://github.com/mit-cml/appinventor-sources.git This will create a folder named “appinventor-sources” where the sources (and a copy of the repository) will reside. If you have problems with this command, please visit the MIT Center for Mobile Learning github site at https://github.com/mit-cml. We’ll refer to this folder throughout the rest of these instructions as the appinventor parent folder. The appinventor parent folder also contains a file called sample-.gitignore. This file should be copied to another file simply named .gitignore which will keep generated files from being added to the git index (note that the file will be hidden in the finder and terminal after renaming. You can view it passing the flag -a to the ls command: ls -al). Checking out Blockly as a dependency is also needed, and can be done by issuing the following command (from the appinventor-sources folder): git submodule update --init If you intend to make changes to the MIT CML’s Blockly fork, please follow instructions in the Readme file 2.3 Building App Inventor As of September 10, 2013 all future development of MIT App Inventor is oriented to App Inventor 2. To that end, the master branch is now the code for App Inventor 2. For a quick guide on the development workflow that the team at MIT follows please look at the Contributing through github slide deck. If you intend to do work on App Inventor 1, the branch ai1 in github is what you are looking for. With everything set up as above, connect to the appinventor-sources parent folder. It contains a subfolder called appinventor, and we’ll refer to this folder as the appinventor folder Now you can run the command: $ ant clean Cleaning isn’t necessary every time you build, but it’s a good idea to clean each time before you build in case some junk has crept into the various build directories. Note again that if you clean, all your projects will go away, so make sure you have copies of the projects before cleaning. Also note that if you clean, the compilation process will take longer (ant builds incremental changes only, but clean deletes all the available packaged projects). The App Inventor system requires a secret key called the “authkey.” If you change this key, all users will find themselves logged out when you update your service. To make this key persistant, it is store in a directory name “.appinventor” placed in your home directory on your computer, not in the App Inventor sources. If you have never built App Inventor before, you need to create this key. In general you only need to do this once, even if you delete the App Inventor sources and re-download them. To build this key, do: $ ant MakeAuthKey If you forget this step, you will get an error in the next step. If you do, just do the “MakeAuthKey” step and re-do the step below and all should work. After you’ve cleaned, you can build App Inventor by running the command $ ant Building should take several minutes and end with the message BUILD SUCCESSFUL. If something goes wrong, it’s most likely a problem with ant or Java or the App Inventor source. 2.4 Configuration options If you’re building App Inventor to deploy on your local machine for testing or for personal use, you’re ready to run the system. If you’re deploying to appspot.com, you’ll need to set up a build server and also specify some configuration options, both for the build server and for the App Inventor service itself. We’ll describe those options below, but if this is your first time building App Inventor, you should just go ahead now and try it for yourself on your local machine. 2.5 The App Inventor Companion app The App Inventor Companion app is used to build apps incrementally. The Companion contains all the components available in the system, so whenever a component changes, the Companion has to be changed too. When you built the system (above) the Companion app should have been built and left in ./build/buildserver/MIT\\ AI2\\ Companion.apk. To install the Companion, make sure the “adb” command is in your execution path (so if you type “adb” you get a usage message instead of a “command not found” error). With your device connected via USB you can issue the command: $ ant installplay This will uninstall any previous version of the AI2 Companion on your phone and install the new version. Note that two different Companions exist for App Inventor 2 and App Inventor 1. The instructions here build the Companion for App Inventor 2. You can also build the Companion manually (for distribution, for instance). To do so, you can use the target: $ ant PlayApp From the appinventor folder, the companion gets generated at:./build/buildserver/MIT AI2 Companion.apk For a video on how to build the companion manually, you can read this blog post. (Note: This blog post was made before we included building the Companion with the “installplay” build target). Note: The first time you build a Companion the system will create a “debug” android keystore in the .appinventor subdirectory of your home directory. This keystore will then be used to digitally sign the Companion (part of the Android package building process). This means that you can update your copy of the Companion without having to manually uninstall a previous version, provided the previous version was also built by you. If you have a Companion installed from Google Play or directly from the production App Inventor service, you will have to manually uninstall that version, as it is signed by our production keys. Similarly when you are finished developing and wish to re-install the Companion from the Store, you will have to manually uninstall your own version first. 2.6 Automated Tests The App Inventor sources contain a number of automated tests at different levels or automation (from unit to functional). Tests for Java code have been written using the JUnit framework, and no additional libraries are needed to run them (JUnit is contained in the appinventor/lib folder). Test for the JavaScript code rely on PhantomJS, and this tool needs to be available in your PATH. More information about these tests can be found in this README file. The JavaScript tests are wired into the overall ant script, and will run with the Java tests. To run them alls you can run the command: $ ant tests It is important to run all tests before and after changing any code, but if you only intend to use the sources (and not modify them), running tests is a good way to make sure that things are still working. 3. Running App Inventor on your local machine (MacOS) This section shows how to run App Inventor on your local machine for development and testing.Before you try to use App Inventor, you’ll need to have installed the App Inventor setup software, just as with using MIT App Inventor. The setup software is the same for users and developers: If you’ve already been using MIT App Inventor 1 on your computer, you needn’t do anything extra to use your local version. Note that packages for App Inventor 2 are still a work in progress. A version for Mac is available through the setup pages. This document describes how to access and use the latest version of the setup tools for App Inventor 2. 3.1 Setting up your MacOSX system: Required software Before starting to work with App Inventor, you’ll need following software: Java: You need Java 7. App Inventor doesn’t yet build with Java 8. You can check your version by typing “java -version” at a shell. WARNING. Just to keep things confusing, Java 7 is also called Java 1.7, followed by a minor version number. As of today (Jan. 2, 2015) you should use version 1.7.0_72, Version 1.7.0_71 will fail to run the unit tests. Version 1.7.0_55 and 1.7.0_45 will both work. You can find 1.7.0_72 here: http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html Apache ant: 1.8. 1 or 1.8.2. Type “ant -version” at a shell to check your version. If you are not running the right version, you may have to get it from the web bash: You should be running bash as your shell. PhantomJS. You’ll need to install this in order to run the unit tests: http://phantomjs.org/ In addition, you’ll need Git: We suggest that you manage your source code using the git distributed revision control system. Most Linux distributions come with Git you can also download and build it from http://git-scm.com. Google AppEngine Java SDK. Get and install the Java version of the SDK from https://developers.google.com/appengine/downloads. Make a note of the folder where you install it. We’ll refer to this folder as the appengine SDK folder in the instructions below. (If you are planning to do some development using Eclipse and the Android plugin, you can install the SDK directly from the plugin). Python is also a dependency, but it’s a default in most OSX installations. 3.2 Launching App Inventor You can launch your local App Inventor service by connecting to the appinventor folder and running the command (on a single line) Note: The reference to 1.9.36 below is just an example. The version of the sdk changes frequently. So replace the 1.9.36 below with the version number that you downloaded above. /appengine-java-sdk-1.9.36/bin/dev_appserver.sh --port=8888 --address=0.0.0.0 appengine/build/war/ Where is the path to where you installed the App Engine SDK, and you replace “1.9.36” with the number of the Appengine SDK version you are running. Note: It’s a good idea to periodically download the latest version of the SDK. You might also want to create a link called appengine-java-sdk, linked to the latest version, and use that link in your launch command so you don’t have to change your command when you update the SDK version. Note: Make sure the dev_appserver.sh file is executable.) You can change the port number and the locations of the AppEngine SDK and App Inventor directory to suit your system configuration. The --address flag is an AppEngine feature that lets other computers connect to your server over the Web. The shell window will print status information as the server runs. You’ll probably want to maintain this as a log for troubleshooting. For convenience, you may want set the server up to run detached, and save its output to a log, with a command line (all on one line) like: nohup /appengine-java-sdk-1.9.36/bin/dev_appserver.sh --port=8888 --address=0.0.0.0 /appengine/build/war/ > serverlog.out & You’ll find it useful to create a shell script that runs this command, to save yourself the bother of typing it over and over. Run this command and wait about 30 seconds while the system starts up. (You can follow the progress in the log.) Then browse to localhost:8888 and you should see App Inventor running. People on your local network should also be able to use it by browsing to :8888. Test the system by creating some projects. This should be an almost completely working App Inventor system.. You should be able to open the Blocks editor, connect the phone or the emulator, download and upload files -- in short, everything except packaging apps. You’ll need a buildserver to package apps. 3.3 Launching a build server on your local machine You’ll need to set up a build server. You can use your local machine as the build server. You can also designate a different machine as a buildserver, as described below in in Setting up a Build Server. To start and run the build server on your local machine, open a new shell, connect to the buildserver subdirectory of the App Inventor directory cd your appinventor directory cd buildserver and run ant RunLocalBuildServer If all is successful, you should see output that ends in [java] Server running As with the App Inventor server, you’ll probably want to maintain a log, and also run detached, with a command line like: cd ~/appinventor-build/appinventor/buildserver nohup ant RunLocalBuildServer > ../../buildserver-log.out & When you build a project, it’s useful to watch the buildserver output to see the steps it goes through in packaging and to verify that things are running. Packaging can take a long time, especially if you are using a small machine for the build server. You might want to create a shell script that runs this command together with the command above that launches App Inventor, so you can launch App Inventor and start the build server with a single command for testing and debugging. You can verify that your build server is running by looking at the log, or by viewing some status information with a web browser. Browsing to localhost:9990/buildserver/vars will show you some status information about the server and the machine it’s running on. Also, browsing to localhost:9990/buildserver/health should respond OK if the server is running. 4. Building and Launching App Inventor (GNU/Linux) This section describes how to build and run the App Inventor service on machines running the GNU/Linux operating system. Once you’ve built App Inventor, you can run it on your machine’s dev server for testing and development or you can deploy it to appspot.com. You’ll also need to create a build server. The steps here are almost identical to those for MacOS.Before you try to use App Inventor, you’ll need to have installed the App Inventor setup software, just as with using MIT App Inventor. The setup software is the same for users and developers: If you’ve already been using MIT App Inventor 1 on your computer, you needn’t do anything extra to use your local version. Note that packages for App Inventor 2 are still a work in progress. A version for Mac is available through the setup pages. This document describes how to access and use the latest version of the setup tools for App Inventor 2. 4.1 Setting up your GNU/Linux system: Required software Before starting with App Inventor, make sure your server includes the following software: Java: We have tested build using Oracle Java 7. Other versions might work, but we haven’t tested these. We recommend using Oracle Java as opposed to OpenJDK. Feel free to experiment with OpenJDK for building App Inventor, but there may be incompatibilities. In particular, when you are using App Inventor 1 to create apps, the Blocks Editor might not work under OpenJDK due to the fact that the needed utility to sign jar files “jarsigner” is not provided with OpenJDK. Once you’ve installed Java, check that Java and Java Web Start both work by trying the standard App Inventor “test your Java configuration” tests at http://beta.appinventor.mit.edu/learn/setup/index.html. If this doesn’t work, you might need to reinstall Java. In App Inventor 2, the blocks editor does not use Java anymore (it’s a JavaScript app running in the browser), so less Java problems are expected. Apache ant: You may need to install Apache ant, or you may need to update your installed version to 1.8.1 or 1.8.2 (or newer). Check your version. bash: You should be running bash apache-ant-1.8.2 (or newer) export JAVA_HOME=/usr/local/build as your shell. To make ant work more conveniently, under GNU/Linux, add the following to your .bashrc file, making the necessary changes to reflect the actual directories where you’ve installed Java and ant: export ANT_HOME=/usr/share/ant/adtools/java/jdk export PATH=${PATH}:${ANT_HOME}/bin git: We suggest that you manage your source code using the git distributed version control system. You can find an appropriate distribution at http://git-scm.com. Many Linux distributions also come with git as part of the distribution. Google AppEngine Java SDK. NOTE: there seems to be an issue with version 1.9.28, so download 1.9.27 for now. Get and install the latest Java version of the SDK from developers.google.com/appengine/downloads.html. 64bit compatibility: If you are using a 64bit machine and JDK, you will need to install 32Bit compatibility for aapt to work. In Ubuntu you can do so with the command: sudo apt-get install ia32-libs Python is also a dependency, but it’s a default in most Linux installations. 4.1.1 Note on Ubuntu 14.04.1 LTS 64-bit As of Ubuntu 14.X the compatibility package is32-libs does not exist anymore. The following packages have been tested as a good combination to get App Inventor up and running in this distribution: openjdk-7-jdk ant lib32z1 lib32ncurses5 lib32bz2-1.0 lib32stdc++6 Oracle JDK 7 should also be an option if that’s your preference. 4.2 Building App Inventor and Launching it on your local machine (GNU/Linux) Once you have the required software installed, the steps for getting the source code, building App Inventor, and launching it on your local machine for testing and development are the same as for MacOS described above. 5. Building and Launching App Inventor (Windows) This section describes how to build and run the App Inventor service on machines running the Windows operating system. Once you’ve built App Inventor, you can run it on your machine’s dev server for testing and development or you can deploy it to appspot.com. You’ll also need to create a build server. The steps here are almost identical to those for MacOS and GNU/Linux, but the scripts for launching AppEngine are .cmd files instead of .sh files. 5.1 Setting up your Windows system: Required software You will need Java version 7. Ant ( http://ant.apache.org/bindownload.cgi ) You might need to add Ant to Windows System/User Variables (For Windows 7, My Computer --> Properties --> Advanced System Settings --> Environment Variables --> System/User Variable) GitHub (https://github.com/) a. You might need to add git to the Windows System Variables b. After installed the Github, you can clone the App Inventor source code from here. AppEngine SDK ( https://developers.google.com/appengine/downloads ) NOTE: there seems to be an issue with version 1.9.28, so download 1.9.27 for now. a. The current supported version for MIT App Inventor is 1.9.27. Android SDK ( http://developer.android.com/sdk/index.html ) a. Recommend to use the installer version Python (http://www.python.org/ftp/python/2.7.5/python-2.7.5.msi) you will need to install Python and add it in your PATH (environment variables). We recommend using version 2.7.5, but any newer version should work. PhantomJS 5.2 Building and Launching App Inventor When running from the Command Prompt, one might need to make sure there is no space between any letters in the directory. If there is, you need to change the directory, or get a new account name without a single space (Windows 7 doesn’t support changing the user account name). see note below Please note that the default directory will be C:\\Program File\\xxx, and the there is a space between the word Program and File. The recommended installation path will be a direct sub-folder in the C:. If you follow this path, and you have an existing Java JRE or JDK installed, you need to uninstall them and then do the installation, or add the new variable path to the “Path” variable under the System Variables. NOTE: Rather than running from the Command Prompt, if you run commands from msysgit using git bash (https://msysgit.github.io/), the process for installing will be identical to Mac OS. There is no need to change directory names to avoid spaces or change the source code. In addition, you will be able to run the .sh files instead of .cmd. With all appropriate software installed as listed above, the process is identical to Mac OSX installation. This has been tested and verified with git bash from msysgit. Finally, you need to check whether all the required variables are set properly by entering “set” into the command prompt. If they are not, you might need to double check that you make the change using the admin account, or reboot the OS (in some rare cases). Build You might want to double check JAVA_HOME variable by entering the command echo %JAVA_HOME% to the command prompt. Not having this set correctly will result in many compilation errors when you try to build App Inventor.. If you do see some errors, or failures during the building process, go back to double check the source code and do ant clean before you do the next ant. Users have reported several problems when compiling the system. They are generally associated with how Windows allocates memory for the Java heap. Environment variables can help with this process; some users have reported that creating the following variable makes the errors go away:set _JAVA_OPTIONS=-Xmx1024M In other cases, Ant options seem to work too:set ANT_OPTS=-Xms512m -Xmx512m Launching When running the App Engine, you should call the .cmd file, NOT the .sh file as is the case for OSX and Linux. You can launch your local App Inventor service by connecting to the appinventor folder and running the command (on a single line) /appengine-java-sdk-1.9.11/bin/dev_appserver.cmd --port=8888 --address=0.0.0.0 appengine/build/war/ NOTE: As of 4/18/2016 you must use a version of the App Engine SDK that is at 1.9.27 or lower. The dev_appserver in newer versions will not work. You will also want to have the latest version and use that for deployment to App Engine itself. Where is the path to where you installed the App Engine SDK, and you replace “1.9.11” with the number of the Appengine SDK version you are running. (It’s a good idea to periodically download the latest version of the SDK. Also make sure the dev_appserver.cmd file is executable.) You can change the port number and the locations of the AppEngine SDK and App Inventor directory to suit your system configuration. The --address flag is an AppEngine feature that lets other computers connect to your server over the Web. The shell window will print status information as the server runs. You’ll probably want to maintain this as a log for troubleshooting. For convenience, you may want set the server up to run detached, and save its output to a log, with a command line (all on one line) like: Run this command and wait about 30 seconds while the system starts up. (You can follow the progress in the log.) Then browse to localhost:8888 and you should see App Inventor running. People on your local network should also be able to use it by browsing to :8888. Test the system by creating some projects. This should be an almost completely working App Inventor system.. You should be able to open the Blocks editor, connect the phone or the emulator, download and upload files -- in short, everything except packaging apps. You’ll need a buildserver to package apps. 5.3 Launching a build server on your local machine You’ll need to set up a build server. You can use your local machine as the build server. You can also designate a different machine as a buildserver, as described below in in Setting up a Build Server. To start and run the build server on your local machine, open a new shell, connect to the buildserver subdirectory of the App Inventor directory cd your appinventor directory cd buildserver and run ant RunLocalBuildServer If all is successful, you should see output that ends in [java] Server running When you build a project, it’s useful to watch the buildserver output to see the steps it goes through in packaging and to verify that things are running. Packaging can take a long time, especially if you are using a small machine for the build server. You might want to create a shell script that runs this command together with the command above that launches App Inventor, so you can launch App Inventor and start the build server with a single command for testing and debugging. You can verify that your build server is running by looking at the log, or by viewing some status information with a web browser. Browsing tolocalhost:9990/buildserver/vars will show you some status information about the server and the machine it’s running on. Also, browsing tolocalhost:9990/buildserver/health should respond OK if the server is running. 6. Setting up a build server The instructions above showed how to deploy App Inventor on a local machine, which functions both as the App Inventor service and the build server. If you are deploying the App Inventor service on Google App Engine at appspot.com., you’ll need to provide your own build server. This section describes how to set up a build server. The following section will show how to use this build server in conjunction with appspot.com to deploy a service that can be used by anyone on the Web (and you can also set up access restrictions). The instructions here are for build server machines must be running the Linux or MacOS. Setting up build servers for Windows are described at the end of this document. The build server machine must be on the public internet so it is reachable from appspot.com. For example, you can’t set it up so that it runs behind a firewall. The steps in creating a buildserver are Create the software for the buildserver machine Install the software on the buildserver machine and start the server, as described in this section. Section 6 will explain how to launch your service on App Engine and configure it to use your build server. Section 7 will discuss some configuration options you can specify for build server and for the App Inventor service itself. 6.1 Create the buildserver software package To create the buildserver software, first build app inventor as explained above in section 2. But don’t go on the launch the service as in section 3. Instead, open a new shell, connect to the buildserver subdirectory of the App Inventor folder cd your appinventor directory cd buildserver and run ant BuildDeploymentTar This should generate, in the appinventor folder, a file:build/buildserver/BuildServer.tar Create a new folder on your desktop called for-BuildServer and copy BuildServer.tar to that new folder. Look in the App Inventor folder for a subdirectory called misc. In it, there should be a file called launch-buildserver. Copy launch-buildserver to the for-Buildserver folder. The for-buildserver folder now contains the software package to be installed on the buildserver machine. 6.2 Install the software on the buildserver machine and start the build server The buildserver machine must be reachable from the public internet. Log on to that machine and pick a directory to hold the buildserver software. We’ll refer to this folder as the buildserver folder. Place Buildserver.tar and launch-buildserver in the buildserver folder. Connect to the buildserver folder, and run the command tar -xf BuildServer.tar This should produce a folder called lib. Finally, in the buildserver folder, run ./launch-buildserver See below for some of the options you might want to specify for launch-buildserver Running launch-buildserver will start the build server and create a log file buildserver-log.out. If you view the this log, you should see startup messages, ending in “server running”. Later, as you package apps with your App Inventor service, you can examine this log file to watch the build progress and to help diagnose build errors. Note: launch-buildserver attempts to save the buildserver log file in the directory /home/buildserver. This will fail if there is no such directory on the buildserver machine. You can change this target directory with one of the buildserver options (see below). To check that the buildserver is running, use a browser to visit the URLhttp://:9990/buildserver/vars Where is the hostname (or IP address) of the buildserver machine. If the build server is running, you should see a page with status information. If you don’t see this, check the buildserver log for clues as to what might be wrong. 7. Deploying App Inventor on Google App Engine Once you’ve gotten experience running the App Inventor service on your local machine, you can deploy your own service Google AppEngine at appspot.com and make it available to anyone on the web. This section describes how to deploy the service on Google App Engine from machines running the MacOS or GNU/Linux operating system. Instructions are the same for both systems. Deploying on Windows is discussed at the end of this document. The instructions here assume that, as described above in sections 2 and 3, you’ve already built and launched App Inventor on your local system, and that you know how to set up a build server, 7.1 Issues to consider before deploying on App Engine Here are some things to keep in mind about deploying on App Engine. These considerations are especially important if you are going to provide the system as a service for others to use, rather than just for personal experimentation. 7.1.1 Java and App Engine versions Currently (May 2017) We recommend the following versions of Java and Google App Engine. This pair was tested by Hal in May 2016: Java version 1.7.0_79. Other versions might also work. Java 8 works for building a standalone system, but deploying to App Engine requires Java 7. If you use Java 8 specific features the code may fail in production. Appengine-java-sdk-1.9.36. (As of May 2017) Versions below v1.9.36 do not work for building a local instance because they use the deprecated Cloud files API. 7.1.2 App Engine hosting; getting an Application ID If you’re not using a local server, then you will run App Inventor as a Java web service on Google App Engine. As with any App Engine service, you deploy App Inventor as a hosted service on Google’s infrastructure at appspot.com. The instructions below are self-contained. But if you are going to be hosting a service for others, we strongly recommend that you get some experience with App Engine and Java App Engine services. There are several tutorials on the Google App Engine site that describe how to get started. You’ll need to create an application on Google App Engine to run your App Inventor service, and register an application id for it. You can learn how to do this from the App Engine tutorials. You’ll also need to configure your application to use Google Cloud Store (GCS). Part of this configuration will involve creating a GCS bucket; this will happen when you configure your instance as a cloud integration project. Google requires you to start a free trial with Google App Engine before you’re allowed to create a GCS bucket. The free trial lasts for a limited time and provides a limited amount of storage, but this should be sufficient for testing. Google will ask you to enter a credit card number before activating the trial, even if your expected charge will be zero. 7.1.3 User login and authentication The local App Inventor service you created above had no user authentication. In contrast, the service on App Engine requires people to log in with a Google ID. In principle, anyone on the web with a Google ID can use your service, which is probably not what you want. To restrict access, App Inventor lets you optionally configure a whitelist , where the only people who can use the service are those whose IDs you include on the whitelist. You can set up the whitelist when you set the configuration options. 7.1.4 Storage for user projects The App Inventor service will maintain storage for individual user projects, both source code and compiled apps (APK files), of Google App Engine data bases. Remember that this user project storage is part of your service: If you clear the database, then the stored user projects will go away. If you are experimenting with the service, and also providing it for others, you should advise your users to maintain backup copies of their projects in their individual machines in case you need to rebuild the service and clear your database. 7.1.5 Build server In contrast to a local service, where the local App Inventor service can also be the build server, you must provide a separate build server machine for an App Inventor service hosted on App Engine. The build server machine must be on a public network where Google App Engine can reach it. 7.1.6 App Engine charges for use Google charges for App Engine use, beyond a certain amount. This limit should be adequate for personal use or in providing a service for a few users. But with more than that, you may find yourself running up against App Engine’s free use limit. If you are running a service for others to use, you should experiment with small user groups and keep monitoring the load. 7.2 Building and deploying App Inventor and the Build Server Deploying to App Engine has two main parts: build App Inventor and upload to App Engine set up a build server and configure your App Inventor service to use it There are also configuration options for the App Inventor service and the build server that you may want to set. (See below) 7.2.1 Build App Inventor and deploy it on appspot.com Build App Inventor just as you did above in section 2. But don’t go on to run it on your local machine. 7.2.2 Deploy your service to appspot.com Connect to the App Inventor directory on your local machine and run the command (all on one line) /bin/appcfg.sh -A --oauth2 update appinventor/appengine/build/war where is the path to where you installed the App Engine Java SDK, and is the application id you created with Google App Engine. Note: You may want to create a script with the command line above, to avoid having to retype it in the future. Now you should be able to browse to .appspot.com and see your App Inventor service running there. You should be able to use it, open the blocks editor, and work interactively with the phone or emulator -- everything but packaging apps. 7.2.3 Configuring your instance as a Cloud Integration Project In order to use Cloud Storage, your instance must be configured as a Cloud Integration Project. Info is here: https://cloud.google.com/appengine/docs/java/googlecloudstorageclient/activate See the section labeled “Using a default bucket”: If your app doesn't have a default bucket, create one: Visit the App Engine Admin console and select your app. Select Application Settings in the left navigation pane and scroll to the bottom of the page to Cloud Integration Click Create and wait for the bucket to be created. The bucket is completely set up and ready for use. Notice that these instructions are performed with the App Engine Admin console—which is not the same as the Google Developers Console! After doing this, you should be able to see the new, default bucket in Google Developers Console > Storage > Cloud Storage > Browser. It looks like this: Even though the bucket appears immediately after the Cloud Integration task is completed, you will have to wait a little while—perhaps an hour—before your new instance can use its storage. 7.2.4 Set up a build server and configure your App Inventor service to use it To package apps, you’ll need a build server. Set up and launch a build server as described above in section 5, and test that the server is running and is reachable from the public internet. Now connect to the appinventor folder on your local machine find the fileappengine/build/war/WEB-INF/appengine-web.xml This assumes you’ve already built App Inventor on that machine. Warning: Make sure you edit the file in the folder appengine/build/war and not the version of the file in appengine/war. Change the line that readsto replace “localhost” with the name for your Build Server machine, specifying port 9990, for example,value=”mybuildmachine.myschool.edu:9990”. Note: Keep the port at 9990. It is possible to change to a different port, but this requires also making some other changes, and changing the port where the buildserver is listening See the section below on Changing the Build Server Port Number. Re-deploy your App Inventor service using the same appcfg.sh command as above, and test that you can package an app. If something goes wrong, use your browser to check the build server’s /buildserver/vars page to verify that your build server is running and that your App Inventor service can reach it over the network. It might also help to look at the information shown if you click the Debugging link on the App Inventor Designer page. 8. Configuration options for the App Inventor service This section describes some useful options you can configure for your App Inventor service. 8.1 Setting up a white list The App Inventor server can be configured to use a whitelist: only users on the list will be permitted to log in. Others will get a message saying that the server is not available. The whitelist is located in the file/appengine/build/war/WEB-INF/whitelist Edit this file to list the user addresses you want to permit, one address per line. Don’t forget to include your own address. Now turn on the whitelist restriction: Find the file/appengine/build/war/WEB-INF/appengine-web.xml Edit the line that readsto change “false” to “true”. You can leave the whitelist restriction off if you wish. Bear in mind that if you do so, anyone will be able to connect to your service. 8.2 Message of the day You can configure App Inventor specify a message of the day (MOTD), that users will see at the upper right of the designer. This feature is turned off by default, and we suggest that you keep it off. 8.2.1 Enabling the message of the day But if you do want to display a MOTD for your service, find the file/appengine/build/war/WEB-INF/appengine-web.xml Change the line that readsto make the value an interval for checking is there is a new MOTD. For example, a value of 900 would check every 15 minutes. A value of 0 disables the MOTF. We suggest that you keep the checking interval long, or keep the MOTD disabled, because the constant checking puts load on the App Engine service, which will increase your instance’s usage statistics and may put you past the free limit of App Engine services. 8.2.2 Setting the text for the message of the day Do this step only if you chose to enable the MOTD.Once your App Inventor service is running, you can specify the text for the MOTD by opening the administration console for your service (from appspot.com) and selecting Data Viewer on the left (under data). Use the “By kind” dropdown list to select MotdData and open up the item with id=1. Under the Content section, you’ll see a box for Value. You can edit the contents of that box to create the new MOTD text. You can make this MOTD change at any time. You don’t have to restart the service in order for it to take effect. 8.3 Terms of Service People are asked to agree to terms of service the first time they connect to your appinventor service. The terms of service are an HTML document located at/docs/about/termsofservice.htmland you can edit these as you wish. This file will be reflected in the static pagehttp:///about/termsofservice.html To configure App Inventor to now ask for people to agree to terms of service at all, you need to turn on the TOS popup window. Go to the appinventor folder and find the file/appengine/war/WEB-INF/appengine-web.xml Edit the line that readsto change “true” to “false”. The contents of the TOS popup window can be edited in/appengine/war/Ya_tos_form.htmlChange that popup, which is a small box, to link to about/termsofservice.html 9. Configuration options for the Build server This section describes configuration options for the build server. Generally, these are specified as command-line options to launchbuildserver. 9.1 Version number matching Each App Inventor release has a version number (e.g., “61”). You’ll find this version shown at the bottom right of the designer screen in the browser, at the bottom left of the blocks editor window, and at the beginning of the Build Server log. These versions must match, or else App Inventor won’t build projects. When you update to a new release, be sure to update both the build server and the App Inventor service. If you are using someone else’s Build Server, you must work with them to both use the same version. You can configure App Inventor to not enforce version number matching, something that might be useful when you are testing new versions. To turn off version number matching, go to the appinventor folder and find the file/appengine/build/war/WEB-INF/appengine-web.xml Edit the line that readsto change “true” to “false”. 9.2 Checking the Build Server Status Information To check whether the Build Server is running, browse to the URLhttp: /buildserver/healthwhere is the name and port where you deployed the Build Server. If the server responds “OK”, then it is running and accepting build requests. If you browse tohttp: /buildserver/varsyou’ll see information about the status of the server including memory usage and load average. There’s also information about the number of jobs built and rejected and the number of simultaneous builds, which might be useful in tuning your server to match the load (see below). 9.3 Changing the Build Server Port Number The build server port is set by default at 9990. You should leave it set at 9990 if you can, but if you really need to change it, you can do it as follows: First, as described above under “Specify the Build Server machine”: Go to the appinventor folder and find the file/appengine/build/war/WEB-INF/appengine-web.xml Change the line that readsto the correct hostname and port. Then launch the Build Server to use this port number by running launchbuildserver with the command line option--port nwhere n is the port number. You should use your browser to check the build server status and verify that the it is listening on the correct port. 9.4 Specifying the maximum number of simultaneous builds Building projects is a compute-intensive task. Several users trying to build simultaneously can overwhelm a build server. Your users will notice this by the fact that projects take a very long time to build. You can configure the Build Server to limit the number of build tasks it will work on simultaneously. If the maximum number of simultaneous builds is set to 8, for example, and there are currently 8 builds going on, the an attempt to do an additional build will get a response saying that the server is busy, with a request to try again in a few minutes. The number of rejected requests is included in the Build Server status information. You can adjust the max number of simultaneous builds and experiment with what works, given your build server and the number of users who are working with it. The default is set to allow an unlimited number of simultaneous builds. You’ll probably want to change this if you are deploying a service for public use. Something like 8 simultaneous builds is a realistic number for a reasonably powerful machine. To change this parameter, edit the launch-buildserver script as described above for the port number, adding the option--maxSimultaneousBuilds 8or whatever number you want to use instead of 8. Setting the number to 0, or leaving out the optional argument, makes the maximum number of simultaneous builds unlimited. 9.5 Restricting the allowable App Engine hosts Normally you build server will respond to any App Inventor that requests it to build. You can restrict this to a list of designated hosts with the requiredHosts option to launchbuildserver. Calling launch builder with the option--requiredHosts list of hostswill cause the build server to respond only to hosts in the list. 9.6 Path for the Build Server log You can change the location where the Build Server will write its log by using the logpath option:--logpath 10. Running App Inventor locally with an external build server Note: This isn’t implemented yet. For now, if you run App Inventor on your local machine, you must also use that machine as the build server. 11. Some tips and tricks for speeding up development See the suggestions in this document. By ColinTree - 502470184@qq.com - 转载请注明出处            最后更新： 2018-10-13 "},"ImportAIX/":{"url":"ImportAIX/","title":"如何导入AIX拓展包","keywords":"","body":"如何导入AIX拓展包 首先呢，找到下载好的.aix文件下载的文件不是aix的话： 可以尝试双击文件，使用压缩包软件打开，里面通常就有一个aix文件 如果下载的时候使用的是IE 或者 Edge，尝试换一个浏览器如Chrome下载 还不行的话，直接在QQ向我要即可 aix文件需要作为一个整体上传，所以不需要再做任何操作，包括解压aix文件 接下来前往Appinventor（thunkable也是极其相近的操作）打开需要导入拓展的项目找到组件列表底部的Extension类别单击展开列表 点击带下划线的import extenion 在弹出的小窗口中，单击选择文件，在文件管理器中选择文件上传并确认 一切就绪，接下来拓展组件就可以像普通组件一样使用啦 By ColinTree - 502470184@qq.com - 转载请注明出处            最后更新： 2018-10-13 "},"CreateAIX/":{"url":"CreateAIX/","title":"如何写AIX(appinventor拓展组件)","keywords":"","body":"如何写AIX(appinventor拓展组件) By ColinTree - 502470184@qq.com - 转载请注明出处            最后更新： 2018-10-13 "},"ActivityStarter/":{"url":"ActivityStarter/","title":"Activity启动器实用参数表","keywords":"","body":"Activity启动器实用参数表 本文档由ColinTree整理筛选自1.4.0版本APPINVActivityStarter（筛选规则：删减谷歌系列等国内无法使用的功能）中文部分均为ColinTree翻译。 *=Activity_with_text_data_result Action ActivityClass ActivityPackage DataType DataUri ExtraKey ExtraValue 打开蓝牙 android.bluetooth.adapter.action.REQUEST_ENABLE 使蓝牙可被检测 android.bluetooth.adapter.action.REQUEST_DISCOVERABLE 安装应用 android.intent.action.MAIN com.android.packageinstaller.PackageInstallerActivity com.android.packageinstaller file:///mnt/sdcard/../XXX.apk 卸载应用 android.intent.action.VIEW com.android.packageinstaller.UninstallerActivity com.android.packageinstaller XXX 打开计算器 android.intent.action.MAIN com.android.calculator2.Calculator com.android.calculator2 打开SIM卡应用 android.intent.action.VIEW com.android.stk.StkMenuActivity com.android.stk 选择铃声 android.intent.action.RINGTONE_PICKER 设置墙纸 android.intent.action.SET_WALLPAPER 打开WiFi界面 android.net.wifi.PICK_WIFI_NETWORK 查看下载 android.intent.action.VIEW_DOWNLOADS 打开录相机 android.media.action.VIDEO_CAMERA 打开相机 android.media.action.STILL_IMAGE_CAMERA 调用拍照 * android.media.action.IMAGE_CAPTURE 调用录像 * android.media.action.VIDEO_CAPTURE 调用录音 * android.media.action.RECORD_SOUND 设置新的锁屏密码 android.app.action.SET_NEW_PASSWORD 音乐播放器 android.intent.action.MUSIC_PLAYER 浏览器类型的应用的网络使用设置 android.intent.action.MANAGE_NETWORK_USAGE 查看电池用量统计 android.intent.action.POWER_USAGE_SUMMARY 拨号 android.intent.action.CALL_BUTTON 最近通话记录 com.android.phone.action.RECENT_CALLS 列出所有联系人 com.android.contacts.action.LIST_ALL_CONTACTS 调用拨号 android.intent.action.DIAL tel:号码 拨打号码 android.intent.action.CALL tel:号码 视频拨号 com.android.phone.videocall tel:号码 调用语音邮箱 android.intent.action.DIAL voicemail:号码 写邮件 android.intent.action.VIEW mailto:邮箱地址?subject=标题 body 内容 发短信 android.intent.action.SENDTO smsto:号码 sms_body 信息内容 发彩信 android.intent.action.SENDTO mmsto:号码 mms_body 信息内容 短信列表 android.intent.action.MAIN vnd.android-dir/mms-sms 打开日历 android.intent.action.VIEW vnd.android.cursor.item/event 添加日历活动 android.intent.action.INSERT vnd.android.cursor.item/event title 标题内容 选择联系人 * android.intent.action.PICK vnd.android.cursor.dir/person 打开网址 android.intent.action.VIEW http://XXX 播放网络上的MP3文件 android.intent.action.VIEW com.android.internal.app.ResolverActivity android audio/mp3 http://XXX/XXX.mp3 播放网络上的ASF文件 android.intent.action.VIEW com.android.internal.app.ResolverActivity android video/asf http://XXX/XXX.asf 打开SD卡上的图片文件 android.intent.action.VIEW image/jpg file:///mnt/sdcard/../XXX.jpg 打开SD卡上的视频文件 android.intent.action.VIEW video/mp4 file:///mnt/sdcard/../XXX.mp4 分享文本 android.intent.action.SEND text/plain android.intent.extra.TEXT 文本内容 编辑SD卡上的txt文件 android.intent.action.EDIT text/plain file:///mnt/sdcard/../XXX.txt 编辑SD卡上的jpg文件 android.intent.action.EDIT image/jpg file:///mnt/sdcard/../XXX.jpg 把网址添加到书签栏 android.intent.action.INSERT vnd.android.cursor.dir/bookmark url http://XXX 打开本地网址 com.android.htmlviewer.HTMLViewerActivity com.android.htmlviewer file:///mnt/sdcard/../XXX.html 设置图片 android.intent.action.ATTACH_DATA image/* file:///mnt/sdcard/../XXX.jpg 搜索 android.intent.action.SEARCH query 内容 全局搜索 android.intent.action.GLOBAL_SEARCH query 内容 网页搜索 android.intent.action.WEB_SEARCH query 内容 网页语音搜索 android.speech.action.WEB_SEARCH 搜索视频 android.intent.action.MEDIA_SEARCH query 内容 播放搜索得到的视频 android.intent.action.MEDIA_PLAY_FROM_SEARCH query 内容 语音搜索（语音助手） android.intent.action.SEARCH_LONG_PRESS 搜索已安装应用 android.intent.action.SEARCH com.android.providers.applications.ApplicationLauncher com.android.providers.applications query 内容 选取文件 * android.intent.action.GET_CONTENT container/directory file:///sdcard/ 选取图片 * android.intent.action.GET_CONTENT image/* 选取视频 * android.intent.action.GET_CONTENT video/* 选择 * android.intent.action.PICK */* 选择图片 * android.intent.action.PICK image/* 选择视频 * android.intent.action.PICK video/* 备份日历活动 android.intent.action.MAIN com.android.providers.calendar.CalendarDebugActivity com.android.providers.calendar Flash player设置 android.intent.action.MAIN com.adobe.flashplayer.SettingsManager com.adobe.flashplayer ES文件浏览器选择文件 * com.estrongs.action.PICK_FILE ES文件浏览器选择文件夹 * com.estrongs.action.PICK_DIRECTORY ES文件浏览器打开文件夹 android.intent.action.VIEW resource/folder file:///sdcard/../ 以下是设置内容，不予翻译 设置项目 Action ActivityClass ACCESSIBILITY_SETTINGS android.settings.ACCESSIBILITY_SETTINGS ADD_ACCOUNT_SETTINGS android.settings.ADD_ACCOUNT_SETTINGS AIRLANE_MODE_SETTINGS android.settings.AIRLANE_MODE_SETTINGS APN_SETTINGS android.settings.APN_SETTINGS APPLICATION_DETAILS_SETTINGS android.settings.APPLICATION_DETAILS_SETTINGS APPLICATION_DEVELOPMENT_SETTINGS android.settings.APPLICATION_DEVELOPMENT_SETTINGS APPLICATION_SETTINGS android.settings.APPLICATION_SETTINGS BLUETOOTH_SETTINGS android.settings.BLUETOOTH_SETTINGS DATA_ROAMING_SETTINGS android.settings.DATA_ROAMING_SETTINGS DATE_SETTINGS android.settings.DATE_SETTINGS DEVICE_INFO_SETTINGS android.settings.DEVICE_INFO_SETTINGS DISPLAY_SETTINGS android.settings.DISPLAY_SETTINGS INPUT_METHOD_SETTINGS android.settings.INPUT_METHOD_SETTINGS INPUT_METHOD_SUBTYPE_SETTINGS android.settings.INPUT_METHOD_SUBTYPE_SETTINGS INTERNAL_STORAGE_SETTINGS android.settings.INTERNAL_STORAGE_SETTINGS LOCATION_SOURCE_SETTINGS android.settings.LOCATION_SOURCE_SETTINGS MANAGE_APPLICATIONS_SETTINGS android.settings.MANAGE_APPLICATIONS_SETTINGS MEMORY_APPLICATIONS_SETTINGS android.settings.MEMORY_APPLICATIONS_SETTINGS MEMORY_CARD_SETTINGS android.settings.MEMORY_CARD_SETTINGS NETWORK_OPERATOR_SETTINGS android.settings.NETWORK_OPERATOR_SETTINGS NFCSHARING_SETTINGS android.settings.NFCSHARING_SETTINGS NFC_SETTINGS android.settings.NFC_SETTINGS PRIVACY_SETTINGS android.settings.PRIVACY_SETTINGS QUICK_LAUNCH_SETTINGS android.settings.QUICK_LAUNCH_SETTINGS SEARCH_SETTINGS android.settings.SEARCH_SETTINGS SECURITY_SETTINGS android.settings.SECURITY_SETTINGS SETTINGS android.settings.SETTINGS SOUND_SETTINGS android.settings.SOUND_SETTINGS SYNC_SETTINGS android.settings.SYNC_SETTINGS USER_DICTIONARY_SETTINGS android.settings.USER_DICTIONARY_SETTINGS WIFI_SETTINGS android.settings.WIFI_SETTINGS WIRELESS_SETTINGS android.settings.WIRELESS_SETTINGS CallFeaturesSetting com.android.phone.CallFeaturesSetting com.android.phone CdmaCallOptions com.android.phone.CdmaCallOptions com.android.phone DataUsage com.android.phone.DataUsage com.android.phone EmergencyDialer com.android.phone.EmergencyDialer com.android.phone EnablelccPinScreen com.android.phone.EnablelccPinScreen com.android.phone FdnList com.android.phone.FdnList com.android.phone FdnSetting com.android.phone.FdnSetting com.android.phone GsmUmtsAdditionalCallOptions com.android.phone.GsmUmtsAdditionalCallOptions com.android.phone GsmUmtsCallForwardOptions com.android.phone.GsmUmtsCallForwardOptions com.android.phone GsmUmtsCallOptions com.android.phone.GsmUmtsCallOptions com.android.phone ManualSelectNetwork com.android.phone.ManualSelectNetwork com.android.phone MobileNetworkSettings com.android.phone.MobileNetworkSettings com.android.phone NetworkModeSelectionActivity com.android.phone.NetworkModeSelectionActivity com.android.phone NetworkSetting com.android.phone.NetworkSetting com.android.phone PhonePreference com.android.phone.PhonePreference com.android.phone prefernetwork.OperatorSelectActivity com.android.phone.prefernetwork.OperatorSelectActivity com.android.phone Settings com.android.phone.Settings com.android.phone SimContact com.android.phone.SimContact com.android.phone sip.SipSettings com.android.phone.sip.SipSettings com.android.phone accounts.AddAccountSettings com.android.settings.accounts.AddAccountSettings com.android.settings ApnSettings com.android.settings.ApnSettings com.android.settings BandMode com.android.settings.BandMode com.android.settings BatteryInfo com.android.settings.BatteryInfo com.android.settings bluetooth.DevicePickerActivity com.android.settings.bluetooth.DevicePickerActivity com.android.settings bluetoothAdvancedSettings com.android.settings.bluetoothAdvancedSettings com.android.settings CdmaApnSettings com.android.settings.CdmaApnSettings com.android.settings DateTimeSettingsSetupWizard com.android.settings.DateTimeSettingsSetupWizard com.android.settings DevelopmentSettings com.android.settings.DevelopmentSettings com.android.settings DeviceAdminSettings com.android.settings.DeviceAdminSettings com.android.settings Display com.android.settings.Display com.android.settings DisplaySettings com.android.settings.DisplaySettings com.android.settings DockSettings com.android.settings.DockSettings com.android.settings GSensorCalibration com.android.settings.GSensorCalibration com.android.settings lccLockSettings com.android.settings.lccLockSettings com.android.settings inputmethod.InputMethodAndSebtypeEnablerActivity com.android.settings.inputmethod.InputMethodAndSebtypeEnablerActivity com.android.settings LanguageSettings com.android.settings.LanguageSettings com.android.settings ManageApplications com.android.settings.ManageApplications com.android.settings MediaFormat com.android.settings.MediaFormat com.android.settings MediaFormatSD com.android.settings.MediaFormatSD com.android.settings ProxySelector com.android.settings.ProxySelector com.android.settings quicklaunch.QuickLaunchSettings com.android.settings.quicklaunch.QuickLaunchSettings com.android.settings RadioInfo com.android.settings.RadioInfo com.android.settings RunningServices com.android.settings.RunningServices com.android.settings SecuritySettings com.android.settings.SecuritySettings com.android.settings Settings com.android.settings.Settings com.android.settings Settings$AccessibilitySettingsActivity com.android.settings.Settings$AccessibilitySettingsActivity com.android.settings Settings$AdvancedWifiSettingsActivity com.android.settings.Settings$AdvancedWifiSettingsActivity com.android.settings Settings$AndroidBeamSettingsActivity com.android.settings.Settings$AndroidBeamSettingsActivity com.android.settings Settings$BluetoothSettingsActivity com.android.settings.Settings$BluetoothSettingsActivity com.android.settings Settings$DataUsageSummaryActivity com.android.settings.Settings$DataUsageSummaryActivity com.android.settings Settings$DataTimeSettingsActivity com.android.settings.Settings$DataTimeSettingsActivity com.android.settings Settings$DeviceInfoSettingsActivity com.android.settings.Settings$DeviceInfoSettingsActivity com.android.settings Settings$HDMI3DPlaySettingsActivity com.android.settings.Settings$HDMI3DPlaySettingsActivity com.android.settings Settings$InputMethodAndLanguageSettingsActivity com.android.settings.Settings$InputMethodAndLanguageSettingsActivity com.android.settings Settings$LocationSettingsActivity com.android.settings.Settings$LocationSettingsActivity com.android.settings Settings$ManagerAccountsSettingsActivity com.android.settings.Settings$ManagerAccountsSettingsActivity com.android.settings Settings$PowerUsageSummaryActivity com.android.settings.Settings$PowerUsageSummaryActivity com.android.settings Settings$PrivacySettingsActivity com.android.settings.Settings$PrivacySettingsActivity com.android.settings Settings$SpellCheckersSettingsActivity com.android.settings.Settings$SpellCheckersSettingsActivity com.android.settings Settings$StorageUseActivity com.android.settings.Settings$StorageUseActivity com.android.settings Settings$TextToSpeechSettingsActivity com.android.settings.Settings$TextToSpeechSettingsActivity com.android.settings Settings$VpnSettingsActivity com.android.settings.Settings$VpnSettingsActivity com.android.settings Settings$VpnSettingsActivity com.android.settings.Settings$VpnSettingsActivity com.android.settings Settings$WifiP2pSettingsActivity com.android.settings.Settings$WifiP2pSettingsActivity com.android.settings Settings$WirelessSettingsActivity com.android.settings.Settings$WirelessSettingsActivity com.android.settings SettingsSafetyLegalActivity com.android.settings.SettingsSafetyLegalActivity com.android.settings SoundSettings com.android.settings.SoundSettings com.android.settings TestingSettings com.android.settings.TestingSettings com.android.settings UsageStats com.android.settings.UsageStats com.android.settings UsbSettings com.android.settings.UsbSettings com.android.settings UserDictionarySettings com.android.settings.UserDictionarySettings com.android.settings wifi.CWAcountInfo com.android.settings.wifi.CWAcountInfo com.android.settings wifi.LanInfo com.android.settings.wifi.LanInfo com.android.settings wifi.WifiAPITest com.android.settings.wifi.WifiAPITest com.android.settings wifi.ConfigInfo com.android.settings.wifi.ConfigInfo com.android.settings wifi.WifiInfo com.android.settings.wifi.WifiInfo com.android.settings wifi.WifiSettings com.android.settings.wifi.WifiSettings com.android.settings wifi.WifiStatusTest com.android.settings.wifi.WifiStatusTest com.android.settings WifiApSettings com.android.settings.WifiApSettings com.android.settings By ColinTree - 502470184@qq.com - 转载请注明出处            最后更新： 2018-10-13 "},"ActivityStarter/README.en.html":{"url":"ActivityStarter/README.en.html","title":"未翻译完整版","keywords":"","body":"Activity启动器实用参数表-未翻译完整版 本文档由ColinTree整理自1.4.0版本APPINVActivityStarter Class *=Activity_with_text_data_result Action ActivityClass ActivityPackage DataType DataUri ExtraKey ExtraValue Miscellaneous Enable Bluetooth android.bluetooth.adapter.action.REQUEST_ENABLE . Bluetooth Discoverable android.bluetooth.adapter.action.REQUEST_DISCOVERABLE . Install Application android.intent.action.MAIN com.android.packageinstaller.PackageInstallerActivity com.android.packageinstaller file:///mnt/sdcard/../XXX.apk . Uninstall Application android.intent.action.VIEW com.android.packageinstaller.UninstallerActivity com.android.packageinstaller XXX . Open Calculator android.intent.action.MAIN com.android.calculator2.Calculator com.android.calculator2 . Sim Toolkit Application (STK) android.intent.action.VIEW com.android.stk.StkMenuActivity com.android.stk . RINGTONE_PICKER android.intent.action.RINGTONE_PICKER . SET_WALLPAPER android.intent.action.SET_WALLPAPER . PICK_WIFI_NETWORK android.net.wifi.PICK_WIFI_NETWORK . VIEW_DOWNLOADS android.intent.action.VIEW_DOWNLOADS . VIDEO_CAMERA android.media.action.VIDEO_CAMERA . STILL_IMAGE_CAMERA android.media.action.STILL_IMAGE_CAMERA . IMAGE_CAPTURE * android.media.action.IMAGE_CAPTURE . VIDEO_CAPTURE * android.media.action.VIDEO_CAPTURE . RECORD_CAPTURE * android.media.action.RECORD_SOUND . SET_NEW_PASSWORD android.app.action.SET_NEW_PASSWORD . MUSIC_PLAYER android.intent.action.MUSIC_PLAYER . MANAGE_NETWORK_USAGE android.intent.action.MANAGE_NETWORK_USAGE . POWER_USAGE_SUMMARY android.intent.action.POWER_USAGE_SUMMARY Social: Call, email, sms, contacts CALL_BUTTON android.intent.action.CALL_BUTTON . RECENT_CALLS com.android.phone.action.RECENT_CALLS . LIST_ALL_CONTACTS com.android.contacts.action.LIST_ALL_CONTACTS . LIST_DEFAULT com.android.contacts.action.LIST_DEFAULT . LIST_CONTACTS_WITH_PHONES com.android.contacts.action.LIST_CONTACTS_WITH_PHONES . LIST_FREQUENT com.android.contacts.action.LIST_FREQUENT . LIST_STREQUENT com.android.contacts.action.LIST_STREQUENT . LIST_STARRED com.android.contacts.action.LIST_STARRED . Dail number android.intent.action.DIAL tel:号码 . Call number android.intent.action.CALL tel:号码 . Video call number com.android.phone.videocall tel:号码 . Dial voicemail android.intent.action.DIAL voicemail:号码 . Call contact phone id android.intent.action.CALL vnd.android.cursor.item/phone content://com.android.contacts/data/1139 . Email to android.intent.action.VIEW mailto:邮箱地址?subject=标题 body 内容 . SMS to nr android.intent.action.SENDTO smsto:号码 sms_body 信息内容 . MMS to nr android.intent.action.SENDTO mmsto:号码 mms_body 信息内容 . Open sms mms in box android.intent.action.MAIN vnd.android-dir/mms-sms . Open Calendar app android.intent.action.VIEW vnd.android.cursor.item/event . Insert calendar event android.intent.action.INSERT vnd.android.cursor.item/event title 标题内容 . Open contact nr XXX android.intent.action.VIEW content://contacts/people/XXX Change the DataUri to an ID form your address book.Use \"Pick contact\" . Edit contact nr XXX android.intent.action.EDIT content://contacts/people/XXX Change the DataUri to an ID form your address book.Use \"Pick contact\" . PICK contact * android.intent.action.PICK vnd.android.cursor.dir/person . Get id contact * android.intent.action.GET_CONTENT vnd.android.cursor.item/contact . Get id contact person * android.intent.action.GET_CONTENT vnd.android.cursor.item/person . Get id contact phone * android.intent.action.GET_CONTENT vnd.android.cursor.item/phone . Get id contact address * android.intent.action.GET_CONTENT vnd.android.cursor.item/postal-address Content:Open,pick,search,edit Opening a url android.intent.action.VIEW http://XXX . Play a mp3 stream android.intent.action.VIEW com.android.internal.app.ResolverActivity android audio/mp3 http://XXX/XXX.mp3 . Play a asf stream android.intent.action.VIEW com.android.internal.app.ResolverActivity android video/asf http://XXX/XXX.asf . View image on SD android.intent.action.VIEW image/jpg file:///mnt/sdcard/../XXX.jpg . View video on SD android.intent.action.VIEW video/mp4 file:///mnt/sdcard/../XXX.mp4 . Share text android.intent.action.SEND text/plain android.intent.extra.TEXT 文本内容 . Edit text on SD android.intent.action.EDIT text/plain file:///mnt/sdcard/../XXX.txt . Edit jpg on SD android.intent.action.EDIT image/jpg file:///mnt/sdcard/../XXX.jpg . INSERT browser bookmark android.intent.action.INSERT vnd.android.cursor.dir/bookmark url http://XXX . Html Viewer local file com.android.htmlviewer.HTMLViewerActivity com.android.htmlviewer file:///mnt/sdcard/../XXX.html . Image ATTACH_DATA android.intent.action.ATTACH_DATA image/* file:///mnt/sdcard/../XXX.jpg . SEARCH android.intent.action.SEARCH query 内容 . GLOBAL_SEARCH android.intent.action.GLOBAL_SEARCH query 内容 . WEB_SEARCH android.intent.action.WEB_SEARCH query 内容 . Speech WEB_SEARCH android.speech.action.WEB_SEARCH . MEDIA_SEARCH android.intent.action.MEDIA_SEARCH query 内容 . MEDIA_PLAY_FROM_SEARCH android.intent.action.MEDIA_PLAY_FROM_SEARCH query 内容 . SEARCH_LONG_PRESS android.intent.action.SEARCH_LONG_PRESS . Search installed apps android.intent.action.SEARCH com.android.providers.applications.ApplicationLauncher com.android.providers.applications query 内容 . GET_CONTENT * android.intent.action.GET_CONTENT . GET a file * android.intent.action.GET_CONTENT container/directory file:///sdcard/ . GET a image * android.intent.action.GET_CONTENT image/* . GET a video * android.intent.action.GET_CONTENT video/* . PICK * android.intent.action.PICK */* . Pick image * android.intent.action.PICK image/* . Pick video * android.intent.action.PICK video/* . Backup calendar database android.intent.action.MAIN com.android.providers.calendar.CalendarDebugActivity com.android.providers.calendar Location: Geo, maps Show map for contact postal-address id android.intent.action.VIEW vnd.android.cursor.item/postal-address content://com.android.contacts/data/396 . Show map for location android.intent.action.VIEW geo:52.377348,4.745877 External apps Chrome - add Bookmark url android.intent.action.VIEW com.google.android.apps.chrome.ManageBookmarkActivity com.android.chrome text/plain url http://XXX . Flash player - settings and Check installed android.intent.action.MAIN com.adobe.flashplayer.SettingsManager com.adobe.flashplayer . ES File Explorer - Pick a file * com.estrongs.action.PICK_FILE . ES File Explorer - Pick a directory * com.estrongs.action.PICK_DIRECTORY . ES File Explorer - Open a directory android.intent.action.VIEW resource/folder file:///sdcard/../ android.settings activity actions ACCESSIBILITY_SETTINGS android.settings.ACCESSIBILITY_SETTINGS . ADD_ACCOUNT_SETTINGS android.settings.ADD_ACCOUNT_SETTINGS . AIRLANE_MODE_SETTINGS android.settings.AIRLANE_MODE_SETTINGS . APN_SETTINGS android.settings.APN_SETTINGS . APPLICATION_DETAILS_SETTINGS android.settings.APPLICATION_DETAILS_SETTINGS . APPLICATION_DEVELOPMENT_SETTINGS android.settings.APPLICATION_DEVELOPMENT_SETTINGS . APPLICATION_SETTINGS android.settings.APPLICATION_SETTINGS . BLUETOOTH_SETTINGS android.settings.BLUETOOTH_SETTINGS . DATA_ROAMING_SETTINGS android.settings.DATA_ROAMING_SETTINGS . DATE_SETTINGS android.settings.DATE_SETTINGS . DEVICE_INFO_SETTINGS android.settings.DEVICE_INFO_SETTINGS . DISPLAY_SETTINGS android.settings.DISPLAY_SETTINGS . INPUT_METHOD_SETTINGS android.settings.INPUT_METHOD_SETTINGS . INPUT_METHOD_SUBTYPE_SETTINGS android.settings.INPUT_METHOD_SUBTYPE_SETTINGS . INTERNAL_STORAGE_SETTINGS android.settings.INTERNAL_STORAGE_SETTINGS . LOCATION_SOURCE_SETTINGS android.settings.LOCATION_SOURCE_SETTINGS . MANAGE_APPLICATIONS_SETTINGS android.settings.MANAGE_APPLICATIONS_SETTINGS . MEMORY_APPLICATIONS_SETTINGS android.settings.MEMORY_APPLICATIONS_SETTINGS . MEMORY_CARD_SETTINGS android.settings.MEMORY_CARD_SETTINGS . NETWORK_OPERATOR_SETTINGS android.settings.NETWORK_OPERATOR_SETTINGS . NFCSHARING_SETTINGS android.settings.NFCSHARING_SETTINGS . NFC_SETTINGS android.settings.NFC_SETTINGS . PRIVACY_SETTINGS android.settings.PRIVACY_SETTINGS . QUICK_LAUNCH_SETTINGS android.settings.QUICK_LAUNCH_SETTINGS . SEARCH_SETTINGS android.settings.SEARCH_SETTINGS . SECURITY_SETTINGS android.settings.SECURITY_SETTINGS . SETTINGS android.settings.SETTINGS . SOUND_SETTINGS android.settings.SOUND_SETTINGS . SYNC_SETTINGS android.settings.SYNC_SETTINGS . USER_DICTIONARY_SETTINGS android.settings.USER_DICTIONARY_SETTINGS . WIFI_SETTINGS android.settings.WIFI_SETTINGS . WIRELESS_SETTINGS android.settings.WIRELESS_SETTINGS android.phone activity Classes CallFeaturesSetting com.android.phone.CallFeaturesSetting com.android.phone . CdmaCallOptions com.android.phone.CdmaCallOptions com.android.phone . DataUsage com.android.phone.DataUsage com.android.phone . EmergencyDialer com.android.phone.EmergencyDialer com.android.phone . EnablelccPinScreen com.android.phone.EnablelccPinScreen com.android.phone . FdnList com.android.phone.FdnList com.android.phone . FdnSetting com.android.phone.FdnSetting com.android.phone . GsmUmtsAdditionalCallOptions com.android.phone.GsmUmtsAdditionalCallOptions com.android.phone . GsmUmtsCallForwardOptions com.android.phone.GsmUmtsCallForwardOptions com.android.phone . GsmUmtsCallOptions com.android.phone.GsmUmtsCallOptions com.android.phone . ManualSelectNetwork com.android.phone.ManualSelectNetwork com.android.phone . MobileNetworkSettings com.android.phone.MobileNetworkSettings com.android.phone . NetworkModeSelectionActivity com.android.phone.NetworkModeSelectionActivity com.android.phone . NetworkSetting com.android.phone.NetworkSetting com.android.phone . PhonePreference com.android.phone.PhonePreference com.android.phone . prefernetwork.OperatorSelectActivity com.android.phone.prefernetwork.OperatorSelectActivity com.android.phone . Settings com.android.phone.Settings com.android.phone . SimContact com.android.phone.SimContact com.android.phone . sip.SipSettings com.android.phone.sip.SipSettings com.android.phone android.settings activity Classes accounts.AddAccountSettings com.android.settings.accounts.AddAccountSettings com.android.settings . ApnSettings com.android.settings.ApnSettings com.android.settings . BandMode com.android.settings.BandMode com.android.settings . BatteryInfo com.android.settings.BatteryInfo com.android.settings . bluetooth.DevicePickerActivity com.android.settings.bluetooth.DevicePickerActivity com.android.settings . bluetoothAdvancedSettings com.android.settings.bluetoothAdvancedSettings com.android.settings . CdmaApnSettings com.android.settings.CdmaApnSettings com.android.settings . DateTimeSettingsSetupWizard com.android.settings.DateTimeSettingsSetupWizard com.android.settings . DevelopmentSettings com.android.settings.DevelopmentSettings com.android.settings . DeviceAdminSettings com.android.settings.DeviceAdminSettings com.android.settings . Display com.android.settings.Display com.android.settings . DisplaySettings com.android.settings.DisplaySettings com.android.settings . DockSettings com.android.settings.DockSettings com.android.settings . GSensorCalibration com.android.settings.GSensorCalibration com.android.settings . lccLockSettings com.android.settings.lccLockSettings com.android.settings . inputmethod.InputMethodAndSebtypeEnablerActivity com.android.settings.inputmethod.InputMethodAndSebtypeEnablerActivity com.android.settings . LanguageSettings com.android.settings.LanguageSettings com.android.settings . ManageApplications com.android.settings.ManageApplications com.android.settings . MediaFormat com.android.settings.MediaFormat com.android.settings . MediaFormatSD com.android.settings.MediaFormatSD com.android.settings . ProxySelector com.android.settings.ProxySelector com.android.settings . quicklaunch.QuickLaunchSettings com.android.settings.quicklaunch.QuickLaunchSettings com.android.settings . RadioInfo com.android.settings.RadioInfo com.android.settings . RunningServices com.android.settings.RunningServices com.android.settings . SecuritySettings com.android.settings.SecuritySettings com.android.settings . Settings com.android.settings.Settings com.android.settings . Settings$AccessibilitySettingsActivity com.android.settings.Settings$AccessibilitySettingsActivity com.android.settings . Settings$AdvancedWifiSettingsActivity com.android.settings.Settings$AdvancedWifiSettingsActivity com.android.settings . Settings$AndroidBeamSettingsActivity com.android.settings.Settings$AndroidBeamSettingsActivity com.android.settings . Settings$BluetoothSettingsActivity com.android.settings.Settings$BluetoothSettingsActivity com.android.settings . Settings$DataUsageSummaryActivity com.android.settings.Settings$DataUsageSummaryActivity com.android.settings . Settings$DataTimeSettingsActivity com.android.settings.Settings$DataTimeSettingsActivity com.android.settings . Settings$DeviceInfoSettingsActivity com.android.settings.Settings$DeviceInfoSettingsActivity com.android.settings . Settings$HDMI3DPlaySettingsActivity com.android.settings.Settings$HDMI3DPlaySettingsActivity com.android.settings . Settings$InputMethodAndLanguageSettingsActivity com.android.settings.Settings$InputMethodAndLanguageSettingsActivity com.android.settings . Settings$LocationSettingsActivity com.android.settings.Settings$LocationSettingsActivity com.android.settings . Settings$ManagerAccountsSettingsActivity com.android.settings.Settings$ManagerAccountsSettingsActivity com.android.settings . Settings$PowerUsageSummaryActivity com.android.settings.Settings$PowerUsageSummaryActivity com.android.settings . Settings$PrivacySettingsActivity com.android.settings.Settings$PrivacySettingsActivity com.android.settings . Settings$SpellCheckersSettingsActivity com.android.settings.Settings$SpellCheckersSettingsActivity com.android.settings . Settings$StorageUseActivity com.android.settings.Settings$StorageUseActivity com.android.settings . Settings$TextToSpeechSettingsActivity com.android.settings.Settings$TextToSpeechSettingsActivity com.android.settings . Settings$VpnSettingsActivity com.android.settings.Settings$VpnSettingsActivity com.android.settings . Settings$VpnSettingsActivity com.android.settings.Settings$VpnSettingsActivity com.android.settings . Settings$WifiP2pSettingsActivity com.android.settings.Settings$WifiP2pSettingsActivity com.android.settings . Settings$WirelessSettingsActivity com.android.settings.Settings$WirelessSettingsActivity com.android.settings . SettingsSafetyLegalActivity com.android.settings.SettingsSafetyLegalActivity com.android.settings . SoundSettings com.android.settings.SoundSettings com.android.settings . TestingSettings com.android.settings.TestingSettings com.android.settings . UsageStats com.android.settings.UsageStats com.android.settings . UsbSettings com.android.settings.UsbSettings com.android.settings . UserDictionarySettings com.android.settings.UserDictionarySettings com.android.settings . wifi.CWAcountInfo com.android.settings.wifi.CWAcountInfo com.android.settings . wifi.LanInfo com.android.settings.wifi.LanInfo com.android.settings . wifi.WifiAPITest com.android.settings.wifi.WifiAPITest com.android.settings . wifi.ConfigInfo com.android.settings.wifi.ConfigInfo com.android.settings . wifi.WifiInfo com.android.settings.wifi.WifiInfo com.android.settings . wifi.WifiSettings com.android.settings.wifi.WifiSettings com.android.settings . wifi.WifiStatusTest com.android.settings.wifi.WifiStatusTest com.android.settings . WifiApSettings com.android.settings.WifiApSettings com.android.settings By ColinTree - 502470184@qq.com - 转载请注明出处            最后更新： 2018-10-13 "},"ErrorCode/":{"url":"ErrorCode/","title":"AI运行错误代码对照","keywords":"","body":"AI运行错误代码对照 错误原因部分 和 相关备注部分，均由ColinTree一条条手动翻译，如有疏漏错误之处，敬请指出。使用搜索功能，在页面搜索错误码更加快速 最后更新于2018.1.20 comp-name{font-size: smaller !important;} 错误码 错误原因 相关备注 错误发生范围 错误内容 英文原文 手机版本相关错误 - Phone version errors 1 拾取联系人邮件时发生错误 没有触发该错误码的情况 联系人选择框 / ContactPicker ERROR_FUNCTIONALITY_NOT_SUPPORTED_CONTACT_EMAIL Warning: This app contains functionality that does not work on this phone: picking an EmailAddress. 2 无法使用邮箱选择器 没有触发该错误码的情况 邮箱地址选择框 / EmailPicker ERROR_FUNCTIONALITY_NOT_SUPPORTED_EMAIL_PICKER Warning: This app contains functionality that does not work on this phone: the EmailPicker component. 3 不支持FushiontablesControl组件功能 FusiontablesControl ERROR_FUNCTIONALITY_NOT_SUPPORTED_FUSIONTABLES_CONTROL Warning: This app contains functionality that does not work on this phone: the FusiontablesControl component. 4 Web组件不支持Cookie功能 Web客户端 / Web ERROR_FUNCTIONALITY_NOT_SUPPORTED_WEB_COOKIES Warning: This app contains functionality that does not work on this phone: using cookies in the Web component. 5 不支持WIFI点对点直连 没有触发该错误码的情况 (没找到) ERROR_FUNCTIONALITY_NOT_SUPPORTED_WIFI_DIRECT Warning: This app contains functionality that does not work on this phone: Wi-Fi peer-to-peer connectivity. 位置传感器相关错误 - LocationSensor errors 101 无法获取纬度信息 位置传感器 / LocationSensor ERROR_LOCATION_SENSOR_LATITUDE_NOT_FOUND Unable to find latitude from %s. 102 无法获取经度信息 位置传感器 / LocationSensor ERROR_LOCATION_SENSOR_LONGITUDE_NOT_FOUND Unable to find longitude from %s. 相机相关错误 - Camera errors 201 相机未返回图像 相机 / Camera ERROR_CAMERA_NO_IMAGE_RETURNED The camera did not return an image. 推特客户端相关错误 - Twitter errors 301 不支持登录 推特客户端 / Twitter ERROR_TWITTER_UNSUPPORTED_LOGIN_FUNCTION Twitter no longer supports this form of Login. Use the Authorize call instead. 302 连接密钥错误 推特客户端 / Twitter ERROR_TWITTER_BLANK_CONSUMER_KEY_OR_SECRET The ConsumerKey and ConsumerSecret properties must be set in order to authorize access for Twitter. Please obtain a Comsumer Key and Consumer Secret specific to your app from http:// twitter.com/oauth_clients/new 303 （就是个错误） 由于国内也用不着，没深入研究 推特客户端 / Twitter ERROR_TWITTER_EXCEPTION Twitter error: %s 304 无法获取安全验证标识 推特客户端 / Twitter ERROR_TWITTER_UNABLE_TO_GET_ACCESS_TOKEN Unable to get access token: %s 305 安全验证失败 推特客户端 / Twitter ERROR_TWITTER_AUTHORIZATION_FAILED Twitter authorization failed 306 获取状态信息失败 推特客户端 / Twitter ERROR_TWITTER_SET_STATUS_FAILED SetStatus failed. %s 307 请求谈论信息失败 推特客户端 / Twitter ERROR_TWITTER_REQUEST_MENTIONS_FAILED RequestMentions failed. %s 308 获取粉丝信息失败 推特客户端 / Twitter ERROR_TWITTER_REQUEST_FOLLOWERS_FAILED RequestFollowers failed. %s 309 获取最新私信失败 推特客户端 / Twitter ERROR_TWITTER_REQUEST_DIRECT_MESSAGES_FAILED RequestDirectMessages failed. %s 310 发送私信失败 推特客户端 / Twitter ERROR_TWITTER_DIRECT_MESSAGE_FAILED DirectMessage failed. %s 311 关注失败 推特客户端 / Twitter ERROR_TWITTER_FOLLOW_FAILED Follow failed. %s 312 停止关注失败 推特客户端 / Twitter ERROR_TWITTER_STOP_FOLLOWING_FAILED StopFollowing failed. %s 313 请求好友动态失败 推特客户端 / Twitter ERROR_TWITTER_REQUEST_FRIEND_TIMELINE_FAILED Twitter RequestFriendTimeline failed: %s 314 搜索失败 推特客户端 / Twitter ERROR_TWITTER_SEARCH_FAILED Twitter search failed. 315 图片路径错误 推特客户端 / Twitter ERROR_TWITTER_INVALID_IMAGE_PATH Invalid Path to Image; Update will not be sent. 乐高相关错误 - LegoMindstormsNXT errors 401 蓝牙未连接 乐高 / NXT ERROR_NXT_BLUETOOTH_NOT_SET The Bluetooth property has not been set. 402 机器未连接 乐高 / NXT ERROR_NXT_NOT_CONNECTED_TO_ROBOT Not connected to a robot. 403 错误的返回数据包 乐高 / NXT ERROR_NXT_INVALID_RETURN_PACKAGE Unable to receive return package. Has the robot gone to sleep? 404 收到错误代码 乐高 / NXT ERROR_NXT_ERROR_CODE_RECEIVED Error code received from robot: %s. 405 无效的应用名称 乐高 / NXT ERROR_NXT_INVALID_PROGRAM_NAME Invalid program name. 406 无效的文件名 乐高 / NXT ERROR_NXT_INVALID_FILE_NAME Invalid file name. 407 无效的电机端口 乐高 / NXT ERROR_NXT_INVALID_MOTOR_PORT The NXT does not have a motor port labeled %s. 408 无效的传感器端口 乐高 / NXT ERROR_NXT_INVALID_SENSOR_PORT The NXT does not have a sensor port labeled %s. 409 无效的邮箱 乐高 / NXT ERROR_NXT_INVALID_MAILBOX The NXT does not have a mailbox number %s. 410 消息太长 乐高 / NXT ERROR_NXT_MESSAGE_TOO_LONG The NXT only accepts messages up to 58 characters. 411 数据太大 列表长度大于16会导致该错误 NXT指令发送器 / NxtDirectCommands ERROR_NXT_DATA_TOO_LARGE The data is too large; it must be 16 bytes or less. 412 无法解码列表项 看了一下，好像列表项不为数字就报错 乐高 / NXT ERROR_NXT_COULD_NOT_DECODE_ELEMENT Could not decode element %s as an integer. 413 列表项无法解析 乐高 / NXT ERROR_NXT_COULD_NOT_FIT_ELEMENT_IN_BYTE Could not fit element %s into 1 byte. 414 无效的源冲突 乐高 / NXT ERROR_NXT_INVALID_SOURCE_ARGUMENT Invalid source argument. 415 无效的目的文件 乐高 / NXT ERROR_NXT_INVALID_DESTINATION_ARGUMENT Invalid destination argument. 416 无法下载文件 乐高 / NXT ERROR_NXT_UNABLE_TO_DOWNLOAD_FILE Unable to download file to robot: %s 417 无法检测颜色 乐高 / NXT ERROR_NXT_CANNOT_DETECT_COLOR Cannot detect color when the DetectColor property is set to False. 418 无法检测光线 乐高 / NXT ERROR_NXT_CANNOT_DETECT_LIGHT Cannot detect light level when the DetectColor property is set to True. 419 无效的生成颜色 乐高 / NXT ERROR_NXT_INVALID_GENERATE_COLOR \"The GenerateColor property is limited to None, Red, Green, or Blue.\" 蓝牙相关错误 - Bluetooth errors 501 蓝牙不可用 蓝牙 / Bluetooth ERROR_BLUETOOTH_NOT_AVAILABLE Bluetooth is not available. 502 蓝牙未开启 蓝牙 / Bluetooth ERROR_BLUETOOTH_NOT_ENABLED Bluetooth is not available. 503 无效的地址 蓝牙 / Bluetooth ERROR_BLUETOOTH_INVALID_ADDRESS The specified address is not a valid Bluetooth MAC address. 504 连接的设备还未配对 蓝牙 / Bluetooth ERROR_BLUETOOTH_NOT_PAIRED_DEVICE The specified address is not a paired Bluetooth device. 505 不是正确的设备类型（不支持） 这个不是很肯定 蓝牙 / Bluetooth ERROR_BLUETOOTH_NOT_REQUIRED_CLASS_OF_DEVICE The specified address is not the required class of device. 506 无效的UUID 蓝牙 / Bluetooth ERROR_BLUETOOTH_INVALID_UUID \"The UUID \\\"\"%s\\\"\" is not formatted correctly.\" 507 无法连接 蓝牙 / Bluetooth ERROR_BLUETOOTH_UNABLE_TO_CONNECT Unable to connect. Is the device turned on? 508 无法监听 蓝牙 / Bluetooth ERROR_BLUETOOTH_UNABLE_TO_LISTEN Unable to listen for a connection from a bluetooth device. 509 无法允许 这个不是很肯定 蓝牙 / Bluetooth ERROR_BLUETOOTH_UNABLE_TO_ACCEPT Unable to accept a connection from a bluetooth device. 510 无法解码 蓝牙 / Bluetooth ERROR_BLUETOOTH_COULD_NOT_DECODE \"Could not decode \\\"\"%s\\\"\" as an integer.\" 511 无法转换为字节(BYTE) 蓝牙 / Bluetooth ERROR_BLUETOOTH_COULD_NOT_FIT_NUMBER_IN_BYTE \"Could not fit \\\"\"%s\\\"\" into 1 byte.\" 512 无法转换为字节(BYTES) 蓝牙 / Bluetooth ERROR_BLUETOOTH_COULD_NOT_FIT_NUMBER_IN_BYTES \"Could not fit \\\"\"%s\\\"\" into %s bytes.\" 513 无法解码列表元素 蓝牙 / Bluetooth ERROR_BLUETOOTH_COULD_NOT_DECODE_ELEMENT Could not decode element %s as an integer. 514 无法将元素装换为字节(BYTE) 蓝牙 / Bluetooth ERROR_BLUETOOTH_COULD_NOT_FIT_ELEMENT_IN_BYTE Could not fit element %s into 1 byte. 515 无法连接至设备 蓝牙 / Bluetooth ERROR_BLUETOOTH_NOT_CONNECTED_TO_DEVICE Not connected to a Bluetooth device. 516 无法进行写操作 蓝牙 / Bluetooth ERROR_BLUETOOTH_UNABLE_TO_WRITE Unable to write: %s 517 无法进行读操作 蓝牙 / Bluetooth ERROR_BLUETOOTH_UNABLE_TO_READ Unable to read: %s 518 遇到数据流结尾 这个不是很肯定 蓝牙 / Bluetooth ERROR_BLUETOOTH_END_OF_STREAM End of stream has been reached. 519 不支持的编码类型 蓝牙 / Bluetooth ERROR_BLUETOOTH_UNSUPPORTED_ENCODING The encoding %s is not supported. Activity启动器相关错误 - ActivityStarter errors 601 没有找到相应的Activity Activity启动器 / ActivityStarter ERROR_ACTIVITY_STARTER_NO_CORRESPONDING_ACTIVITY No corresponding activity was found. 602 没有找到ActivityStarter中的操作信息 Activity启动器 / ActivityStarter ERROR_ACTIVITY_STARTER_NO_ACTION_INFO No Action information in ActivityStarter was found. 媒体相关错误 - Media errors 701 无法加载媒体文件 ERROR_UNABLE_TO_LOAD_MEDIA Unable to load %s. 702 无法准备媒体文件 应该是指的预处理 ERROR_UNABLE_TO_PREPARE_MEDIA Unable to prepare %s. 703 无法播放媒体文件 ERROR_UNABLE_TO_PLAY_MEDIA Unable to play %s. 704 外部储存(SD卡)是只读状态 有时未开启写权限会导致该问题 ERROR_MEDIA_EXTERNAL_STORAGE_READONLY External storage is available but read-only. 705 外部储存不可用 ERROR_MEDIA_EXTERNAL_STORAGE_NOT_AVAILABLE External storage is not available. 706 媒体文件格式错误 原文中指出必须是jpg图片或者png图片 ERROR_MEDIA_IMAGE_FILE_FORMAT \"Image file name must end in \\\"\".jpg\\\"\", \\\"\".jpeg\\\"\", or \\\"\".png\\\"\".\" 707 无法打开文件 ERROR_MEDIA_CANNOT_OPEN Cannot open file %s. 708 获取文件的时候发生错误：…… 省略号内容由程序自动添加 ERROR_MEDIA_FILE_ERROR Got file error: %s. 709 音频输出流无法授予给…… 省略号内容由程序自动添加 ERROR_UNABLE_TO_FOCUS_MEDIA Unable to grant exclusive lock of audio output stream to %s. 710 音频文件还未准备完成 ERROR_SOUND_NOT_READY The sound is not ready to play: %s. 711 也就是需要等待程序加载文件 没有触发该错误码的情况 ERROR_OUT_OF_MEMORY_LOADING_MEDIA Not Enough Memory to load: %s. 712 播放器音量错误 播放器 / Player ERROR_PLAYER_INVALID_VOLUME Invalid volume: %s. Volume must be set to a number between 0 and 100. 录音器相关错误 - SoundRecorder errors 801 未知的错误 录音器 / SoundRecorder ERROR_SOUND_RECORDER An unexpected error occurred while recording sound. 802 无法录制 录音器 / SoundRecorder ERROR_SOUND_RECORDER_CANNOT_CREATE Cannot start recording: %s 803 在没有录音的情况下调用停止 录音器 / SoundRecorder ERROR_SOUND_RECORDER_ILLEGAL_STOP Stop() called when not recording. 804 达到最大录音事件长度 录音器 / SoundRecorder ERROR_SOUND_RECORDER_MAX_DURATION_REACHED Maximum sound recording duration was reached. 805 达到最大录音文件大小 录音器 / SoundRecorder ERROR_SOUND_RECORDER_MAX_FILESIZE_REACHED Maximum sound recording size was reached. 屏幕相关错误 - Form errors 901 屏幕方向参数错误 屏幕相关 ERROR_INVALID_SCREEN_ORIENTATION The specified screen orientation is not valid: %s 902 未找到屏幕xxx 出现于打开新屏幕时，请检查拼写，包括大小写 屏幕相关 ERROR_SCREEN_NOT_FOUND Screen not found: %s 903 从另一个屏幕收到“坏值” “坏值”即无法被处理的值 屏幕相关 ERROR_SCREEN_BAD_VALUE_RECEIVED Bad value received from other screen: %s 904 发送到另一个屏幕失败：出现“坏值” “坏值”即无法被处理的值 屏幕相关 ERROR_SCREEN_BAD_VALUE_FOR_SENDING Bad value for sending to other screen: %s 905 屏幕动画参数错误 屏幕相关 ERROR_SCREEN_INVALID_ANIMATION Bad value for screen open/close animation: %s 906 未找到可以聚焦的可视组件 没有触发该错误码的情况 屏幕相关 ERROR_NO_FOCUSABLE_VIEW_FOUND No Focusable View Found 907 手机不支持ActionBar 屏幕相关 ERROR_ACTIONBAR_NOT_SUPPORTED ActionBar is not supported on this device. 画布相关错误 - Canvas errors 1001 画布内部错误 画布 / Canvas ERROR_CANVAS_BITMAP_ERROR Error getting Canvas contents to save 1002 画布宽度需要是正数 画布 / Canvas ERROR_CANVAS_WIDTH_ERROR Canvas width cannot be set to non-positive number 1003 画布高度需要是正数 画布 / Canvas ERROR_CANVAS_HEIGHT_ERROR Canvas height cannot be set to non-positive number Web客户端相关错误 - Web errors 1101 无法执行GET请求 Web客户端 / Web ERROR_WEB_UNABLE_TO_GET Unable to get a response with the specified URL: %s 1102 不支持的编码格式 Web客户端 / Web ERROR_WEB_UNSUPPORTED_ENCODING The encoding %s is not supported. 1103 无法POST或PUT Web客户端 / Web ERROR_WEB_UNABLE_TO_POST_OR_PUT \"Unable to post or put the text \\\"\"%s\\\"\" with the specified URL: %s\" 1104 无法POST或PUT文件 Web客户端 / Web ERROR_WEB_UNABLE_TO_POST_OR_PUT_FILE \"Unable to post or put the file \\\"\"%s\\\"\" with the specified URL %s.\" 1105 无法解码JSON Web客户端 / Web ERROR_WEB_JSON_TEXT_DECODE_FAILED Unable to decode the JSON text: %s 1106 无法解码HTML编码 Web客户端 / Web ERROR_WEB_HTML_TEXT_DECODE_FAILED Unable to decode the HTML text: %s 1107-1108被下面占用了 1109 无效的网址(URL) Web客户端 / Web ERROR_WEB_MALFORMED_URL The specified URL is not valid: %s 1110 错误：请求头不是列表 Web客户端 / Web ERROR_WEB_REQUEST_HEADER_NOT_LIST The specified request headers are not valid: element %s is not a list 1111 错误：请求头格式错误 请求头列表必须为键值对格式 Web客户端 / Web ERROR_WEB_REQUEST_HEADER_NOT_TWO_ELEMENTS The specified request headers are not valid: element %s does not contain two elements 1112 错误：请求数据不是列表 Web客户端 / Web ERROR_WEB_BUILD_REQUEST_DATA_NOT_LIST Unable to build request data: element %s is not a list 1113 错误：请求数据列表格式错误 同样需要是键值对 Web客户端 / Web ERROR_WEB_BUILD_REQUEST_DATA_NOT_TWO_ELEMENTS Unable to build request data: element %s does not contain two elements 1114 错误：无法发送DELETE请求 Web客户端 / Web ERROR_WEB_UNABLE_TO_DELETE Unable to delete a resource with the specified URL: %s 1115 无法解码XML Web客户端 / Web ERROR_WEB_XML_TEXT_DECODE_FAILED Unable to decode the XML text: %s 联系人选择框相关错误 - Contact picker (and PhoneNumberPicker) errors 1107 手机不支持联系人选择 联系人选择框 / ContactPicker ERROR_PHONE_UNSUPPORTED_CONTACT_PICKER The software used in this app cannot extract contacts from this type of phone. 1108 手机不支持联系人选择中的搜索 联系人选择框 / ContactPicker ERROR_PHONE_UNSUPPORTED_SEARCH_IN_CONTACT_PICKING \"To pick contacts, pick them directly, without using search.\" 摄像机相关错误 - Camcorder errors 1201 镜头未返回画面 摄像机 / Camcorder ERROR_CAMCORDER_NO_CLIP_RETURNED The camcorder did not return a clip. 视频播放器相关错误 - VideoPlayer errors 1301 无法打开全屏 视频播放器 / VideoPlayer ERROR_VIDEOPLAYER_FULLSCREEN_UNAVAILBLE Cannot start fullscreen mode. 1302 全屏无法退出 视频播放器 / VideoPlayer ERROR_VIDEOPLAYER_FULLSCREEN_CANT_EXIT Cannot exit fullscreen mode. 1303 不支持全屏 视频播放器 / VideoPlayer ERROR_VIDEOPLAYER_FULLSCREEN_UNSUPPORTED Fullscreen mode not supported on this version of Android. 布局相关错误 - Arrangement errors 1401 布局水平对齐参数错误 必须是1/2/3 适用布局组件 ERROR_BAD_VALUE_FOR_HORIZONTAL_ALIGNMENT \"The value -- %s -- provided for HorizontalAlignment was bad. The only legal values are 1, 2, or 3.\" 1402 布局垂直对齐参数错误 必须是1/2/3 适用布局组件 ERROR_BAD_VALUE_FOR_VERTICAL_ALIGNMENT \"The value -- %s -- provided for VerticalAlignment was bad. The only legal values are 1, 2, or 3.\" 条码扫描器相关错误 - BarcodeScanner errors 1501 未找到合适的扫码器 条码扫描器 / BarcodeScanner ERROR_NO_SCANNER_FOUND Your device does not have a scanning application installed. 图片选择框相关错误 - ImagePicker errors 1601 无法保存照片 图像选择框 / ImagePicker ERROR_CANNOT_SAVE_IMAGE Unable to save image: %s 1602 无法复制 图像选择框 / ImagePicker ERROR_CANNOT_COPY_MEDIA Unable to copy selected media: %s 信息收发器相关错误 - Texting errors 1701 错误的“启用消息接收”属性 短信收发器 / Texting ERROR_BAD_VALUE_FOR_TEXT_RECEIVING \"Text Receiving should be either 1, 2 or 3.\" AI伴侣相关错误 - Repl Communication Errors 1801 REPL安全错误 接受不安全的代码块信息 AI伴侣 ERROR_REPL_SECURITY_ERROR Security Error Receiving Blocks from Browser. 方向传感器相关错误 - AccelerometerSensor Errors 1901 错误的“敏感度”属性 必须为1或2或3 方向传感器 / AccelerometerSensor ERROR_BAD_VALUE_FOR_ACCELEROMETER_SENSITIVITY \"The value -- %s -- provided for AccelerometerSensor's sensitivity was bad. The only legal values are 1, 2, or 3.\" 信息分享器相关错误 - Sharing Errors 2001 无法找到要分享的文件 信息分享器 / Sharing ERROR_FILE_NOT_FOUND_FOR_SHARING The File %s could not be found on your device. 文件管理器相关错误 - File errors 2101 未找到文件 文件管理器 / File ERROR_CANNOT_FIND_FILE The file %s could not be found 2102 无法读取文件 文件管理器 / File ERROR_CANNOT_READ_FILE The file %s could not be opened 2103 无法创建文件 文件管理器 / File ERROR_CANNOT_CREATE_FILE The file %s could not be created 2104 无法写入文件 文件管理器 / File ERROR_CANNOT_WRITE_TO_FILE Cannot write to file %s 2105 无法删除ASSET ASSET:应用自带数据，即上传至AI的文件 文件管理器 / File ERROR_CANNOT_DELETE_ASSET Cannot delete asset file at %s 2106 无法写入ASSET ASSET:应用自带数据，即上传至AI的文件 文件管理器 / File ERROR_CANNOT_WRITE_ASSET Cannot write asset file at %s Yandex翻译相关错误 - Yandex.Translate errors 2201 未找到翻译功能连接秘钥 YandexTranslate / Yandex语言翻译器 ERROR_TRANSLATE_NO_KEY_FOUND Missing API key for the Yandex.Translate service. 2202 服务不可用 YandexTranslate / Yandex语言翻译器 ERROR_TRANSLATE_SERVICE_NOT_AVAILABLE The translation service is not available; Please try again later. 2203 解析JSON结果错误 YandexTranslate / Yandex语言翻译器 ERROR_TRANSLATE_JSON_RESPONSE The response from the Yandex.Translate service cannot be parsed; Please try again later. 时间选择框相关错误 - TimePicker errors 2301 不合规的小时数 时间选择框 / TimePicker ERROR_ILLEGAL_HOUR The hour must be set to a value between 0 and 23. 2302 不合规的分钟数 时间选择框 / TimePicker ERROR_ILLEGAL_MINUTE The minute must be set to a value between 0 and 59. 时期选择框相关错误 - DatePicker errors 2401 不合规的日期 日期选择框 / DatePicker ERROR_ILLEGAL_DATE The date you entered is invalid. Web浏览框 - WebViewer errors 2501 网页SSL错误 SSL:安全套接层，网页安全传输协议的一种 Web浏览框 / WebViewer ERROR_WEBVIEW_SSL_ERROR SSL Connection could not complete. FusiontablesControl errors 2601 Fusion table 查询错误 FusiontablesControl FUSION_TABLES_QUERY_ERROR Fusion tables returned an error. The query was: %s. The response was: %s TTS相关错误 - TextToSpeech errors 2701 TTS尚未准备完成 文本语音转换器 / TextToSpeech ERROR_TTS_NOT_READY TextToSpeech is not yet ready to perform this operation 可视组件相关错误 - AndroidViewComponent errors 2801 百分比范围错误 (适用所有可视组件) ERROR_BAD_PERCENT Percent values should be between 0 and 100. 2901-2999留给第一届的某科技竞赛了 2901-2999 are reserved for FIRST Tech Challenge. 图像相关错误 - Image errors 3001 图像无法选装 图像/Image ERROR_IMAGE_CANNOT_ROTATE The version of Android on this device does not support image rotation. 乐高EV3相关错误 - LegoMindstormsEv3 errors 3100 蓝牙未连接 乐高Ev3 / EV3 ERROR_EV3_BLUETOOTH_NOT_SET The Bluetooth property has not been set. 3101 机器未连接 乐高Ev3 / EV3 ERROR_EV3_NOT_CONNECTED_TO_ROBOT Cannot connect to an EV3 robot. Has the robot gone to sleep? 3102 错误的返回信息 乐高Ev3 / EV3 ERROR_EV3_INVALID_REPLY Unable to receive a reply or the reply cannot be understood. 3103 无效的内容冲突 乐高Ev3 / EV3 ERROR_EV3_ILLEGAL_ARGUMENT Illegal argument: %s 3104 无效的电机端口 乐高Ev3 / EV3 ERROR_EV3_ILLEGAL_MOTOR_PORT Cannot understant motor port: %s 3105 无效的传感器端口 乐高Ev3 / EV3 ERROR_EV3_ILLEGAL_SENSOR_PORT Cannot understant sensor port: %s 其它错误 - Form errors signaled in runtime.scm. 3200 遇到除以零的情况 计算中出现的错误 ERROR_DIVISION_BY_ZERO Trying to divide %s by 0. The result might not be valid. Extension errors are signalled from extensions 3300 拓展报的错误 拓展组件 ERROR_EXTENSION_ERROR Error %d in extension %s: %s Map组件相关错误 - Map errors 3401 绘制直线需要两个点 LineString ERROR_LINESTRING_TOO_FEW_POINTS Need at least 2 points for a LineString. Got only %1$d. 3402 解析直线发生错误 LineString ERROR_LINESTRING_PARSE_ERROR Parse error attempting to create LineString: %1$s. 3403 点的参数太少 LineString ERROR_LINESTRING_TOO_FEW_FIELDS Too few fields in point. Expected 2, got %2$d. 3404 解析多边形发生错误 Polygon ERROR_POLYGON_PARSE_ERROR Parse error attempting to create Polygon: %1$s. 3405 点的参数不对 Rectangle ERROR_INVALID_POINT Invalid value for point (%1$s, %2$s). 3406 某位置的点参数不对 ERROR_INVALID_POINT_AT_INDEX Invalid value for point at index %1$d (%2$s, %3$s). 3407 某位置的类型不对 ERROR_INVALID_TYPE_AT_INDEX Invalid type %2$s at index %1$d. Expected %3$s. 3408 某位置的值数量不对 ERROR_INVALID_NUMBER_OF_VALUES_IN_POINT_AT_INDEX Invalid number of values in point at index %1$d. Expected %2$d but found %3$d. 3409 点的值数量不对 ERROR_INVALID_NUMBER_OF_VALUES_IN_POINT Invalid number of values in point. Expected %1$d but found %2$d. 3410 类型不对 ERROR_INVALID_TYPE Invalid type %1$s. Expected %2$s. 3411 GeoJson解析不了 ERROR_INVALID_GEOJSON Unable to parse GeoJSON content for the reason: %1$s. 3412 保存地图期间发生错误 Map ERROR_EXCEPTION_DURING_MAP_SAVE Unable to save Map due to an internal exception: %1$s. 3413 纬度不在-90到90之间 Circle, Marker ERROR_INVALID_LATITUDE Latitude %1$f was not in the expected range [-90, 90]. 3414 经度不在-180到180之间 Circle, Marker ERROR_INVALID_LONGITUDE Longitude %1$f was not in the expected range [-180, 180]. 3415 无法创建tile缓存 没有触发该错误码的情况 Map ERROR_UNABLE_TO_CREATE_TILE_CACHE Unable to create a tile cache for maps. 3416 Marker竖直位置不对 Marker ERROR_INVALID_ANCHOR_VERTICAL Invalid value %1$d given for AnchorVertical. Valid settings are 1, 2, or 3. 3417 Marker横向位置不对 Marker ERROR_INVALID_ANCHOR_HORIZONTAL Invalid value %1$d given for AnchorHorizontal. Valid settings are 1, 2, or 3. 3418 某位置的点的纬度不对 LineString ERROR_INVALID_LATITUDE_IN_POINT_AT_INDEX Invalid latitude %2$s in point at index %1$d. Expected a value between [-90, 90]. 3419 某位置的点的经度不对 LineString ERROR_INVALID_LONGITUDE_IN_POINT_AT_INDEX Invalid longitude %2$s in point at index %1$d. Expected a value between [-180, 180]. 3420 某位置的值不是一个列表 LineString ERROR_EXPECTED_ARRAY_AT_INDEX Expected an array of values at index %1$d, but got %2$s. By ColinTree - 502470184@qq.com - 转载请注明出处            最后更新： 2018-10-13 "}}